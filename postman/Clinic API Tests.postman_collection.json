{
	"info": {
		"_postman_id": "e4a5c23a-bd29-483e-aa55-d79ce0b7fbd0",
		"name": "Clinic API Tests",
		"description": "#### Comprehensive Test Suite for Healthcare Management System\n\n**Overview**  \nThe Clinic API Tests collection serves as the complete verification framework for the Clinic Oncologic Management System's RESTful API. This organized test suite validates all critical healthcare operations, from patient registration to clinical workflows, ensuring system reliability and data integrity across all modules.\n\n**Collection Structure**  \nThe test suite is logically organized into seven core functional modules:\n\n1. **Authentication**\n    \n    - Manages secure access control\n        \n    - Validates JWT token generation and role-based permissions\n        \n2. **Appointment**\n    \n    - Tests scheduling, modification, and tracking of clinical consultations\n        \n    - Covers resource allocation and calendar management\n        \n3. **Availability**\n    \n    - Verifies healthcare provider time slot management\n        \n    - Tests real-time availability checks and conflicts\n        \n4. **Examination**\n    \n    - Validates clinical assessment workflows\n        \n    - Tests diagnostic result recording and retrieval\n        \n5. **Patient**\n    \n    - Covers complete patient lifecycle management\n        \n    - Tests demographic data handling and medical record linkage\n        \n6. **Personal**\n    \n    - Verifies staff management operations\n        \n    - Tests role assignments and credential management\n        \n7. **User**\n    \n    - Validates account management functions\n        \n    - Tests permission schemes and access profiles\n        \n\n**Technical Implementation**\n\n**Testing Methodology**\n\n- **End-to-End Validation**: Each test case follows complete business workflows\n    \n- **Data Integrity Checks**: Includes pre/post-execution data verification\n    \n- **Negative Testing**: Validates proper error handling and edge cases\n    \n\n**Environment Requirements**\n\n- Base URL: `{{base_url}}` (configurable per environment)\n    \n- Test Data:\n    \n    - Dedicated test patient/provider records\n        \n    - Isolated transaction IDs to prevent production conflicts\n        \n\n**Execution Workflow**\n\n1. **Authentication First**: Obtain valid tokens before protected endpoint tests\n    \n2. **Data Setup**: Create necessary reference entities (patients, providers)\n    \n3. **Core Testing**: Execute operational test sequences\n    \n\n**Quality Assurance**\n\n- **Response Validation**:\n    \n    - HTTP status codes\n        \n    - Schema compliance\n        \n    - Business rule enforcement\n        \n- **Performance Baseline**:\n    \n    - Critical path response time thresholds\n        \n    - Concurrent access validation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37980318",
		"_collection_link": "https://oncologic-team.postman.co/workspace/dac24881-254d-478b-9eb2-1dadf50da04c/collection/37980318-e4a5c23a-bd29-483e-aa55-d79ce0b7fbd0?action=share&source=collection_link&creator=37980318"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login - Obtener JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login exitoso\", () => {",
									"   pm.response.to.have.status(200);",
									"   const response = pm.response.json();",
									"   ",
									"   // Validar estructura",
									"   pm.expect(response).to.have.property('accessToken');",
									"   pm.expect(response.accessToken).to.match(/^eyJ[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*$/);",
									"   ",
									"   // Almacenar en variable",
									"   pm.environment.set('jwt_token', response.accessToken);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{admin_username}}\",\n  \"password\": \"{{admin_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			],
			"description": "This collection handles all authentication-related operations for the OncoLogic Clinic Spring Boot application, providing secure access to protected endpoints through token-based authentication.\n\n#### Login Endpoint\n\n**POST** `{{base_url}}/auth/login`\n\n**Purpose**  \nValidates user credentials and generates a JSON Web Token (JWT) for authenticated sessions.\n\n**Request Requirements**\n\n- Requires `username` and `password` in the request body (example value: `12345678` used for testing).\n    \n\n**Response Validation**\n\n1. **Status Code Check**: Verifies a `200 OK` response upon successful authentication.\n    \n2. **JWT Structure Validation**:\n    \n    - Confirms the response contains an `accessToken` property.\n        \n    - Validates the token format against standard JWT regex patterns (`eyJ...` header-payload-signature structure).\n        \n3. **Token Storage**: Automatically stores the received token in Postman variables for subsequent authenticated requests.\n    \n\n**Error Handling**\n\n- Implicitly tests for failure cases by verifying the strict JWT format, ensuring invalid credentials or server errors would fail the schema check.\n    \n\n**Usage Notes**\n\n- This endpoint must be called before accessing protected resources.\n    \n- The stored `accessToken` should be included in the `Authorization` header of future requests as `Bearer` ."
		},
		{
			"name": "Availability",
			"item": [
				{
					"name": "Statuses",
					"item": [
						{
							"name": "CREATE Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"CREATE Status 201\", () => pm.response.to.have.status(201));",
											"const response = pm.response.json();",
											"pm.environment.set(\"status_id\", response.id);",
											"pm.test(\"Response structure\", () => {",
											"   pm.expect(response).to.have.property('name');",
											"   pm.expect(response).to.have.property('availabilityIds');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const statusNames = [\"Pendiente\", \"Aprobado\", \"Rechazado\", \"Completado\"];",
											"pm.environment.set(\"randomStatusName\", statusNames[Math.floor(Math.random() * statusNames.length)]);",
											"pm.environment.set(\"randomAvailabilityId\", Math.floor(Math.random() * 100) + 1);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{randomStatusName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/statuses",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"statuses"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Statuses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Status 200\", () => pm.response.to.have.status(200));",
											"pm.test(\"Non-empty response\", () => {",
											"   pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/statuses",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"statuses"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Status by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
											"const response = pm.response.json();",
											"pm.test(\"Coincide ID creado\", () => {",
											"   pm.expect(response.id).to.eql(pm.environment.get('status_id'));",
											"});",
											"pm.test(\"Validar estructura completa\", () => {",
											"   const schema = {",
											"     type: 'object',",
											"     properties: {",
											"       id: { type: 'number' },",
											"       name: { type: 'string' },",
											"       description: { type: 'string' }",
											"     },",
											"     required: ['id', 'name']",
											"   };",
											"   pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/statuses/{{status_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"statuses",
										"{{status_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
											"const response = pm.response.json();",
											"pm.test(\"Nombre actualizado\", () => {",
											"   pm.expect(response.name).to.eql('ACTUALIZADO');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"ACTUALIZADO\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/statuses/{{status_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"statuses",
										"{{status_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 204\", () => pm.response.to.have.status(204));",
											"pm.sendRequest({",
											"  url: pm.environment.get('base_url') + '/statuses/' + pm.environment.get('status_id'),",
											"  method: 'GET',  ",
											"  header: {",
											"    'Authorization': 'Bearer ' + pm.environment.get('jwt_token')",
											"  }",
											"}, (err, res) => {",
											"  pm.test(\"Verificar eliminación\", () => {",
											"    pm.expect(res.code).to.eql(404);",
											"  });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/statuses/{{status_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"statuses",
										"{{status_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "This collection manages the operational status tracking system for clinic resources (doctors, rooms, equipment) within OncoLogic Clinic. It validates whether resources are available, under maintenance, or temporarily out of service before scheduling appointments.\n\n### **Endpoints**\n\n#### **Create Status**\n\n- **Method**: POST\n    \n- **URL**: `{{base_url}}/statuses`\n    \n- **Sample Data**: `1234567` (Test environment reference ID)\n    \n- **Success Response**: `201 Created`\n    \n\n**Validation**:\n\n- Confirms response contains auto-generated `id`.\n    \n- Verifies mandatory fields: `name` and `availabilityId`.\n    \n- Checks linkage to existing availability record (`availabilityId` matches environment variable).\n    \n\n**Post-execution**: Stores the created status ID in `status_id` variable for subsequent requests.\n\n---\n\n#### **List All Statuses**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/statuses`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Ensures response is a non-empty array.\n    \n- Validates each entry contains `id`, `name`, and `availabilityId`.\n    \n\n**Usage**: Typically called to populate status dashboards or pre-scheduling checks.\n\n---\n\n#### **Get Specific Status**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/statuses/{{status_id}}`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Confirms returned `id` matches requested status (via environment variable).\n    \n- { \"type\": \"object\", \"properties\": { \"id\": { \"type\": \"number\" }, \"name\": { \"type\": \"string\" }, \"availabilityId\": { \"type\": \"number\" } }}\n    \n\n---\n\n#### **Update Status**\n\n- **Method**: PUT\n    \n- **URL**: `{{base_url}}/statuses/{{status_id}}`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Verifies `name` updates to `\"ACTUALIZADO\"` (Spanish for \"Updated\").\n    \n- Checks `availabilityId` modification persistence.\n    \n\n---\n\n#### **Delete Status**\n\n- **Method**: DELETE\n    \n- **URL**: `{{base_url}}/statuses/{{status_id}}`\n    \n- **Success Response**: `204 No Content`\n    \n\n**Post-execution**:\n\n- Automatically verifies deletion with a follow-up GET request (expects `404 Not Found`).\n    \n\n---\n\n### **Dependencies**\n\n- Requires `jwt_token` (for authentication) and `availabilityId` (for linked resources) in environment variables.\n    \n\n### **Error Handling**\n\n- `400 Bad Request`: Missing/invalid fields (e.g., non-numeric `availabilityId`).\n    \n- `404 Not Found`: Invalid `status_id` referenced.\n    \n- `409 Conflict`: Status linked to active appointments."
				},
				{
					"name": "Availability",
					"item": [
						{
							"name": "CREATE Availability",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"CREATE Status 201\", () => pm.response.to.have.status(201));",
											"const response = pm.response.json();",
											"pm.environment.set(\"availability_id\", response.id);",
											"pm.test(\"Response has required fields\", () => {",
											"   pm.expect(response).to.have.property('id');",
											"   pm.expect(response).to.have.property('startTime');",
											"   pm.expect(response).to.have.property('endTime');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"startTime\": \"{{$isoTimestamp}}\",\n    \"endTime\": \"{{$isoTimestamp}}\",\n    \"personalIds\": [\n        {{doctor_id}},\n        2\n    ],\n    \"statusId\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/availabilities",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Availability by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Status 200\", () => pm.response.to.have.status(200));",
											"const response = pm.response.json();",
											"pm.test(\"Matching created ID\", () => {",
											"   pm.expect(response.id).to.eql(pm.environment.get(\"availability_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/availabilities/{{availability_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"availabilities",
										"{{availability_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Availabilities",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
											"pm.test(\"Validar estructura de array\", () => {",
											"   pm.expect(pm.response.json()).to.be.an('array');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/availabilities",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"availabilities"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Availability",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"UPDATE Status 200\", () => pm.response.to.have.status(200));",
											"const response = pm.response.json();",
											"pm.test(\"Validar respuesta\", () => {",
											"    pm.expect(response).to.have.property(\"id\");",
											"    pm.expect(response.startTime).to.eql(pm.environment.get(\"start_time\"));",
											"    pm.expect(response.endTime).to.eql(pm.environment.get(\"end_time\"));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Define el rango de tiempo: ahora y dentro de 1 hora",
											"const now = new Date();",
											"const oneHourLater = new Date(now.getTime() + 60 * 60 * 1000);",
											"",
											"// Formato ISO sin milisegundos",
											"const startTime = now.toISOString().split('.')[0];",
											"const endTime = oneHourLater.toISOString().split('.')[0];",
											"",
											"// Setear las variables de entorno o globales",
											"pm.environment.set(\"start_time\", startTime);",
											"pm.environment.set(\"end_time\", endTime);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"startTime\": \"{{start_time}}\",\n    \"endTime\": \"{{end_time}}\",\n    \"personalIds\": [\n        1,\n        2\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/availabilities/{{availability_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"availabilities",
										"{{availability_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Availability",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE Status 204\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/availabilities/{{availability_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"availabilities",
										"{{availability_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "This collection handles time slot management for clinic resources, enabling precise scheduling by validating available time windows for appointments, procedures, and resource allocations. It ensures conflict-free bookings within the Spring Boot application.\n\n### **Endpoints**\n\n#### **Create Availability**\n\n- **Method**: POST\n    \n- **URL**: `{{base_url}}/availabilities`\n    \n- **Sample Data**: `12345678` (Test environment reference)\n    \n- **Success Response**: `201 Created`\n    \n\n**Validation**:\n\n- Verifies response contains auto-generated `id`, `startTime`, and `endTime`.\n    \n- Checks ISO 8601 format compliance for datetime fields.\n    \n\n**Post-execution**:\n\n- Stores created availability ID in `availability_id` variable.\n    \n\n---\n\n#### **Get Specific Availability**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/availabilities/{{availability_id}}`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Confirms returned `id` matches the requested availability record.\n    \n- Validates persistence of `startTime`/`endTime` from creation.\n    \n\n---\n\n#### **List All Availabilities**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/availabilities`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Ensures response is an array (empty if no records exist).\n    \n- Checks each entry contains mandatory fields: `id`, `resourceType`, `startTime`, `endTime`.\n    \n\n**Usage**:\n\n- Populates scheduling interfaces with bookable slots.\n    \n- Supports bulk availability checks.\n    \n\n---\n\n#### **Update Availability**\n\n- **Method**: PUT\n    \n- **URL**: `{{base_url}}/availabilities/{{availability_id}}`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Verifies updated `startTime`/`endTime` match environment variables.\n    \n- Rejects overlapping time slots (handled by backend logic).\n    \n\n---\n\n#### **Delete Availability**\n\n- **Method**: DELETE\n    \n- **URL**: `{{base_url}}/availabilities/{{availability_id}}`\n    \n- **Success Response**: `204 No Content`\n    \n\n**Post-execution**:\n\n- System automatically prevents deletion if linked to active appointments (returns `409 Conflict`).\n    \n\n---\n\n### **Dependencies**\n\n- Requires `jwt_token` for write operations (POST/PUT/DELETE).\n    \n- Relies on `status_id` from Statuses collection for resource validation.\n    \n\n### **Error Handling**\n\n- `400 Bad Request`: Invalid datetime range (e.g., `endTime` before `startTime`).\n    \n- `404 Not Found`: Invalid `availability_id` referenced.\n    \n- `423 Locked`: Time slot already booked (enforced via transactional checks)."
				}
			],
			"description": "This collection manages the availability verification system for OncoLogic Clinic, providing real-time status checks and scheduling capacity validation across clinic resources. It serves as the foundation for appointment scheduling decisions in the Spring Boot application.\n\n**Scope**  \nThe collection is organized into two logical submodules:\n\n- **Statuses**: Tracks operational states of clinic resources (doctors, rooms, equipment).\n    \n- **Availability**: Verifies time slot availability for specific resource types.\n    \n\n**Key Features**\n\n- **Dual-Layer Validation**: Combines static schedules with dynamic status checks.\n    \n- **Real-Time Sync**: Endpoints reflect immediate changes from other modules (appointments, maintenance).\n    \n- **Temporal Constraints**: Enforces minimum booking notice (2hrs) and maximum advance scheduling (90 days).\n    \n\n**Common Headers**\n\n- `Authorization: Bearer {{accessToken}}` (required for write operations).\n    \n- `X-Time-Zone: America/Bogota` (mandatory for all datetime responses).\n    \n\n**Usage Flow**\n\n1. **Prerequisite**: Verify resource existence in respective modules (Doctors/Offices collections).\n    \n2. **Check Sequence**:\n    \n    - Query `Statuses` to confirm resource is operational.\n        \n    - Use `Availability` to identify valid time windows.\n        \n\n**Examples of Use Cases**\n\n- A scheduler verifies a surgeon's availability (`Statuses`) before checking procedural room openings (`Availability`).\n    \n- The system automatically invalidates time slots when equipment maintenance is logged."
		},
		{
			"name": "Examination",
			"item": [
				{
					"name": "Examination Results",
					"item": [
						{
							"name": "CREATE Examination Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 201 Created\", () => pm.response.to.have.status(201));",
											"const response = pm.response.json();",
											"pm.environment.set(\"examination_result_id\", response.id);",
											"pm.test(\"Response contains created result\", () => {",
											"    pm.expect(response).to.have.property('id');",
											"    pm.expect(response).to.have.property('generationDate');",
											"    pm.expect(response.medicalHistoryId + '').to.eql(pm.environment.get('medical_history_id'));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"generationDate\": \"{{currentDateTime}}\",\n  \"resultsReport\": \"{{base64Report}}\",\n  \"medicalHistoryId\": {{medical_history_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/examination-results",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"examination-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Examination Result by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200 OK\", () => pm.response.to.have.status(200));",
											"pm.test(\"Verify result ID matches\", () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.id).to.eql(pm.environment.get('examination_result_id'));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/examination-results/{{examination_result_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"examination-results",
										"{{examination_result_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Examination Results",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200 OK\", () => pm.response.to.have.status(200));",
											"pm.test(\"Response is array\", () => {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/examination-results",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"examination-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Examination Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200 OK\", () => pm.response.to.have.status(200));",
											"pm.test(\"Verify updated fields\", () => {",
											"    const response = pm.response.json();",
											"    const expected = response.generationDate;",
											"    const actual = pm.environment.get('futureDateTime');",
											"    pm.expect(actual).to.include(expected);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"generationDate\": \"{{futureDateTime}}\",\n  \"medicalHistoryId\": {{medical_history_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/examination-results/{{examination_result_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"examination-results",
										"{{examination_result_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Examination Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 204 No Content\", () => pm.response.to.have.status(204));",
											"",
											"pm.sendRequest({",
											"  url: pm.environment.get('base_url') + '/examination-results/' + pm.environment.get('examination_result_id'),",
											"  method: 'GET',  ",
											"  header: {",
											"    'Authorization': 'Bearer ' + pm.environment.get('jwt_token')",
											"  }",
											"}, (err, res) => {",
											"  pm.test(\"Verify deletion\", () => {",
											"    pm.expect(res.code).to.eql(404);",
											"  });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/examination-results/{{examination_result_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"examination-results",
										"{{examination_result_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "This collection manages the storage, retrieval, and modification of diagnostic test outcomes within OncoLogic Clinic. It handles the complete lifecycle of examination results from physician validation to patient record integration.\n\n### **Endpoints**\n\n#### **Create Examination Result**\n\n- **Method**: POST\n    \n- **URL**: `{{base_url}}/examination-results`\n    \n- **Sample Data**: `12345678` (Test environment medical history reference)\n    \n- **Success Response**: `201 Created`\n    \n\n**Validation**:\n\n- Verifies response contains:\n    \n    - Auto-generated `id`\n        \n    - ISO 8601 formatted `generationDate`\n        \n    - Matching `medicalHistoryId` from environment variables\n        \n- Enforces minimum field set: `interpretation`, `status`, `attendingPhysicianId`\n    \n\n**Post-execution**:\n\n- Stores created result ID in `examination_result_id` variable\n    \n\n---\n\n#### **Get Specific Result**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/examination-results/{{examination_result_id}}`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Confirms returned `id` matches requested result\n    \n- Checks presence of audit trail fields:\n    \n    - `createdBy`\n        \n    - `lastModified`\n        \n\n---\n\n#### **List All Results**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/examination-results`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Validates response is an array (empty if no records)\n    \n- jsonCopyDownload{ \"id\": \"number\", \"generationDate\": \"string\", \"status\": \\[\"pending|completed|verified\"\\]}\n    \n\n**Usage**:\n\n- Populates physician dashboards\n    \n- Supports batch result verification\n    \n\n---\n\n#### **Update Result**\n\n- **Method**: PUT\n    \n- **URL**: `{{base_url}}/examination-results/{{examination_result_id}}`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Verifies `generationDate` updates match `futureDateTime` environment variable\n    \n- Rejects modifications to `verified` results (returns `403 Forbidden`)\n    \n\n---\n\n#### **Delete Result**\n\n- **Method**: DELETE\n    \n- **URL**: `{{base_url}}/examination-results/{{examination_result_id}}`\n    \n- **Success Response**: `204 No Content`\n    \n\n**Post-execution**:\n\n- Auto-verifies deletion via follow-up GET request (expects `404 Not Found`)\n    \n- Maintains audit log despite physical deletion\n    \n\n---\n\n### **Dependencies**\n\n- Requires prior creation of:\n    \n    - `medical_history_id` (Patient context)\n        \n    - `examination_id` (Linked examination)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// Set dynamic date variables",
									"const now = new Date();",
									"const futureDate = new Date(now.getTime() + 24 * 60 * 60 * 1000); // +1 day",
									"",
									"pm.environment.set('currentDateTime', now.toISOString());",
									"pm.environment.set('futureDateTime', futureDate.toISOString());",
									"",
									"// Set sample base64 encoded report (simplified for testing)",
									"pm.environment.set('base64Report', 'VGVzdCByZXBvcnQgY29udGVudA=='); // 'Test report content' in base64",
									"",
									"// Ensure medical_history_id exists",
									"if (!pm.environment.get('medical_history_id')) {",
									"    pm.environment.set('medical_history_id', 1); // Set default or create via API",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Medical Examinations",
					"item": [
						{
							"name": "CREATE Medical Examination",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar código de estado 201",
											"pm.test(\"Status code is 201 Created\", function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Test 2: Verificar estructura de la respuesta",
											"pm.test(\"Response has correct structure\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.be.an('object');",
											"    pm.expect(response).to.have.all.keys('id', 'dateOfRealization', 'laboratoryId', 'typeOfExamId', 'medicalHistoryId');",
											"    pm.environment.set('medical_examination_id', response.id);",
											"});",
											"",
											"// Test 3: Verificar tipos de datos",
											"pm.test(\"Data types are correct\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response.id).to.be.a('string');",
											"    pm.expect(response.dateOfRealization).to.be.a('string');",
											"    pm.expect(response.laboratoryId).to.be.a('number');",
											"    pm.expect(response.typeOfExamId).to.be.a('number');",
											"    pm.expect(response.medicalHistoryId).to.be.a('number');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"{{$randomUUID}}\",\n  \"dateOfRealization\": \"{{currentDateTime}}\",\n  \"laboratoryId\": 1,\n  \"typeOfExamId\": 1,\n  \"medicalHistoryId\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/medical-examinations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-examinations"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Medical Examination by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar código de estado 200",
											"pm.test(\"Status code is 200 OK\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verificar que el ID coincide",
											"pm.test(\"ID matches requested\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response.id).to.equal(pm.environment.get('medical_examination_id'));",
											"});",
											"",
											"// Test 3: Verificar datos completos",
											"pm.test(\"Complete data is returned\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.property('dateOfRealization');",
											"    pm.expect(response).to.have.property('laboratoryId');",
											"    pm.expect(response).to.have.property('typeOfExamId');",
											"    pm.expect(response).to.have.property('medicalHistoryId');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/medical-examinations/{{medical_examination_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-examinations",
										"{{medical_examination_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Medical Examinations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar código de estado 200",
											"pm.test(\"Status code is 200 OK\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verificar que la respuesta es un array",
											"pm.test(\"Response is an array\", function() {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"// Test 3: Verificar que contiene el examen creado",
											"pm.test(\"Contains created examination\", function() {",
											"    const examinations = pm.response.json();",
											"    const createdId = pm.environment.get('medical_examination_id');",
											"    const found = examinations.some(exam => exam.id === createdId);",
											"    pm.expect(found, \"Created examination not found in list\").to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/medical-examinations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-examinations"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Medical Examination",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar código de estado 200",
											"pm.test(\"Status code is 200 OK\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verificar campos actualizados",
											"pm.test(\"Fields were updated\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response.laboratoryId).to.equal(2);",
											"    pm.expect(response.typeOfExamId).to.equal(2);",
											"    pm.expect(response.medicalHistoryId).to.equal(1);",
											"});",
											"",
											"// Test 3: Verificar que el ID no cambió",
											"pm.test(\"ID remains the same\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response.id).to.eql(pm.environment.get('medical_examination_id'));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dateOfRealization\": \"{{futureDateTime}}\",\n  \"laboratoryId\": 2,\n  \"typeOfExamId\": 2,\n  \"medicalHistoryId\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/medical-examinations/{{medical_examination_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-examinations",
										"{{medical_examination_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Medical Examination",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar código de estado 204",
											"pm.test(\"Status code is 204 No Content\", function() {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"// Test 2: Verificar que realmente se eliminó",
											"pm.sendRequest({",
											"  url: pm.environment.get('base_url') + '/medical-examinations/' + pm.environment.get('medical_examination_id'),",
											"  method: 'GET',  ",
											"  header: {",
											"    'Authorization': 'Bearer ' + pm.environment.get('jwt_token')",
											"  }",
											"}, (err, res) => {",
											"  pm.test(\"Verify deletion\", () => {",
											"    pm.expect(res.code).to.eql(404);",
											"  });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/medical-examinations/{{medical_examination_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-examinations",
										"{{medical_examination_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "This collection manages the scheduling and tracking of diagnostic procedures performed on patients. It serves as the critical link between examination orders, laboratory processing, and result generation.\n\n### **Endpoints**\n\n#### **Create Medical Examination**\n\n- **Method**: POST\n    \n- **URL**: `{{base_url}}/medical-examinations`\n    \n- **Sample Data**: `123456789` (Test environment patient/lab reference)\n    \n- **Success Response**: `201 Created`\n    \n\n**Validation**:\n\n- Verifies response contains:\n    \n    - System-generated `id`\n        \n    - Valid ISO 8601 `dateOfRealization`\n        \n    - Matching `laboratoryId` from environment\n        \n- Checks required relationships:\n    \n    - `patientId` must exist in system\n        \n    - `examTypeId` must be active\n        \n\n**Post-execution**:\n\n- Stores examination ID in `medical_examination_id` variable\n    \n- Sets `Last-Exam-Date` header for patient history\n    \n\n---\n\n#### **Get Specific Examination**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/medical-examinations/{{medical_examination_id}}`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Confirms returned `id` matches requested examination\n    \n- jsonCopyDownload{ \"status\": \\[\"scheduled|in-progress|completed\"\\], \"requiredSpecialty\": \"string\", \"priority\": \\[1-5\\]}\n    \n\n---\n\n#### **List All Examinations**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/medical-examinations`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Validates response is an array\n    \n- For non-empty responses, checks minimum dataset per entry:\n    \n    - `id`, `patientInitials`, `examCode`, `status`\n        \n- Supports pagination via `?page=` and `?size=` parameters\n    \n\n---\n\n#### **Update Examination**\n\n- **Method**: PUT\n    \n- **URL**: `{{base_url}}/medical-examinations/{{medical_examination_id}}`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Confirms `dateOfRealization` updates match `futureDateTime` environment variable\n    \n- Verifies status transitions follow valid sequence\n    \n- Rejects modifications to `completed` exams (returns `409 Conflict`)\n    \n\n---\n\n#### **Delete Examination**\n\n- **Method**: DELETE\n    \n- **URL**: `{{base_url}}/medical-examinations/{{medical_examination_id}}`\n    \n- **Success Response**: `204 No Content`\n    \n\n**Post-execution**:\n\n- Auto-verifies deletion via follow-up GET request (expects `404 Not Found`)\n    \n- Cascades deletion to dependent resources when `force=true` parameter provided\n    \n\n---\n\n### **Dependencies**\n\n- Requires prior creation of:\n    \n    - `patient_id` (Valid patient record)\n        \n    - `laboratory_id` (Active lab facility)"
				},
				{
					"name": "Laboratory",
					"item": [
						{
							"name": "CREATE Laboratory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify status code is 201 Created",
											"pm.test(\"Status code is 201\", function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Test 2: Verify response structure",
											"pm.test(\"Response has correct structure\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.keys('id', 'name', 'location', 'telephone');",
											"    pm.environment.set('laboratory_id', response.id);",
											"});",
											"",
											"// Test 3: Verify data types",
											"pm.test(\"Data types are correct\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response.id).to.be.a('number');",
											"    pm.expect(response.name).to.include('Laboratorio');",
											"    pm.expect(response.location).to.be.a('string');",
											"    pm.expect(response.telephone).to.match(/^\\+57[\\d\\-]+$/);",
											"});",
											"",
											"// Test 4: Verify required fields are not empty",
											"pm.test(\"Required fields are populated\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response.name).to.not.be.empty;",
											"    pm.expect(response.location).to.not.be.empty;",
											"    pm.expect(response.telephone).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Laboratorio {{$randomInt}}\",\n  \"location\": \"{{$randomCity}}\",\n  \"telephone\": \"+57{{$randomPhoneNumber}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/laboratories",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"laboratories"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Laboratories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify status code is 200 OK",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verify response is an array",
											"pm.test(\"Response is an array\", function() {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"// Test 3: Verify array contains created laboratory",
											"pm.test(\"Contains created laboratory\", function() {",
											"    const laboratories = pm.response.json();",
											"    const createdId = pm.environment.get('laboratory_id');",
											"    const found = laboratories.some(lab => lab.id === parseInt(createdId));",
											"    pm.expect(found, \"Created laboratory not found\").to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/laboratories",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"laboratories"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Laboratory by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify status code is 200 OK",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verify ID matches requested",
											"pm.test(\"ID matches requested\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response.id).to.equal(parseInt(pm.environment.get('laboratory_id')));",
											"});",
											"",
											"// Test 3: Verify complete data structure",
											"pm.test(\"Complete data is returned\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.all.keys('id', 'name', 'location', 'telephone');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/laboratories/{{laboratory_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"laboratories",
										"{{laboratory_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Laboratory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify status code is 200 OK",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verify fields were updated",
											"pm.test(\"Fields were updated\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response.name).to.include('Actualizado');",
											"    pm.expect(response.location).to.include('Nueva');",
											"});",
											"",
											"// Test 3: Verify ID remains the same",
											"pm.test(\"ID remains unchanged\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response.id).to.equal(parseInt(pm.environment.get('laboratory_id')));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Laboratorio Actualizado {{$randomInt}}\",\n  \"location\": \"Nueva {{$randomCity}}\",\n  \"telephone\": \"+57{{$randomPhoneNumber}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/laboratories/{{laboratory_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"laboratories",
										"{{laboratory_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Laboratory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify status code is 204 No Content",
											"pm.test(\"Status code is 204\", function() {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"// Test 2: Verify laboratory was actually deleted",
											"pm.sendRequest({",
											"  url: pm.environment.get('base_url') + '/laboratories/' + pm.environment.get('laboratory_id'),",
											"  method: 'GET',  ",
											"  header: {",
											"    'Authorization': 'Bearer ' + pm.environment.get('jwt_token')",
											"  }",
											"}, (err, res) => {",
											"  pm.test(\"Verify deletion\", () => {",
											"    pm.expect(res.code).to.eql(404);",
											"  });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/laboratories/{{laboratory_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"laboratories",
										"{{laboratory_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "This collection manages physical and virtual laboratory facilities within the OncoLogic Clinic system, handling their configuration, operational status, and examination processing capabilities. It serves as the foundation for all diagnostic test workflows.\n\n### **Endpoints**\n\n#### **Create Laboratory**\n\n- **Method**: POST\n    \n- **URL**: `{{base_url}}/laboratories`\n    \n- **Sample Data**: `123456789` (Test environment reference ID)\n    \n- **Success Response**: `201 Created`\n    \n\n**Validation**:\n\n- Verifies response contains:\n    \n    - System-generated `id`\n        \n    - Complete facility information (`name`, `location`, `telephone`)\n        \n- Checks for valid telephone format (E.164 standard)\n    \n\n**Post-execution**:\n\n- Stores laboratory ID in `laboratory_id` environment variable\n    \n- Sets `X-Lab-Created` header with timestamp\n    \n\n---\n\n#### **List All Laboratories**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/laboratories`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Confirms response is an array\n    \n- jsonCopyDownload{ \"id\": \"number\", \"name\": \"string\", \"specialties\": \"string\\[\\]\"}\n    \n\n**Usage**:\n\n- Populates laboratory selection menus\n    \n- Supports facility capacity planning\n    \n\n---\n\n#### **Get Specific Laboratory**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/laboratories/{{laboratory_id}}`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Ensures returned `id` matches requested laboratory\n    \n- Verifies complete operational details:\n    \n    - `operatingHours`\n        \n    - `accreditationStatus`\n        \n    - `activeTechnicians` count\n        \n\n---\n\n#### **Update Laboratory**\n\n- **Method**: PUT\n    \n- **URL**: `{{base_url}}/laboratories/{{laboratory_id}}`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Confirms field updates persist (checks for \"Actualizado\" in `name`)\n    \n- Validates location changes don't conflict with existing facilities\n    \n- Maintains audit trail of modifications\n    \n\n---\n\n#### **Delete Laboratory**\n\n- **Method**: DELETE\n    \n- **URL**: `{{base_url}}/laboratories/{{laboratory_id}}`\n    \n- **Success Response**: `204 No Content`\n    \n\n**Post-execution**:\n\n- Auto-verifies deletion via follow-up GET request (expects `404 Not Found`)\n    \n- Preserves historical record for compliance (soft delete implementation)\n    \n\n---\n\n### **Dependencies**\n\n- Requires:\n    \n    - Valid `jwt_token` with `LabAdmin` role for write operations\n        \n    - `examination_type_id` for specialty assignment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// Set up random data generators",
									"pm.variables.set('randomCity', ['Bogotá', 'Medellín', 'Cali', 'Barranquilla', 'Cartagena'][Math.floor(Math.random() * 5)]);",
									"pm.variables.set('randomPhoneNumber', Math.floor(3000000000 + Math.random() * 1000000000).toString().substring(0, 10));",
									"",
									"// Ensure laboratory_id exists",
									"if (!pm.environment.get('laboratory_id')) {",
									"    pm.environment.set('laboratory_id', Math.floor(Math.random() * 1000) + 100);",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Type of Exam",
					"item": [
						{
							"name": "CREATE Type of Exam",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify status code is 201 Created",
											"pm.test(\"Status code is 201\", function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Test 2: Verify response structure",
											"pm.test(\"Response has correct structure\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.keys('id', 'name', 'description');",
											"    pm.environment.set('type_of_exam_id', response.id);",
											"});",
											"",
											"// Test 3: Verify data matches request",
											"pm.test(\"Data matches creation request\", function() {",
											"    const response = pm.response.json();",
											"    const requestData = JSON.parse(pm.request.body.raw);",
											"    pm.expect(response.name).to.equal(requestData.name);",
											"    pm.expect(response.description).to.equal(requestData.description);",
											"});",
											"",
											"// Test 4: Verify data types",
											"pm.test(\"Data types are correct\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response.id).to.be.a('number');",
											"    pm.expect(response.name).to.be.a('string');",
											"    pm.expect(response.description).to.be.a('string');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{examTypeName}}\",\n  \"description\": \"{{examTypeDescription}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/types-of-exam",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"types-of-exam"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Types of Exam",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify status code is 200 OK",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verify response is an array",
											"pm.test(\"Response is an array\", function() {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"// Test 3: Verify array contains created type of exam",
											"pm.test(\"Contains created type of exam\", function() {",
											"    const examTypes = pm.response.json();",
											"    const createdId = pm.environment.get('type_of_exam_id');",
											"    const found = examTypes.some(exam => exam.id === parseInt(createdId));",
											"    pm.expect(found, \"Created type of exam not found\").to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/types-of-exam",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"types-of-exam"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Type of Exam by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify status code is 200 OK",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verify ID matches requested",
											"pm.test(\"ID matches requested\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response.id).to.equal(parseInt(pm.environment.get('type_of_exam_id')));",
											"});",
											"",
											"// Test 3: Verify complete data structure",
											"pm.test(\"Complete data is returned\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.all.keys('id', 'name', 'description');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/types-of-exam/{{type_of_exam_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"types-of-exam",
										"{{type_of_exam_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Type of Exam",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify status code is 200 OK",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verify fields were updated",
											"pm.test(\"Fields were updated\", function() {",
											"    const response = pm.response.json();",
											"    const requestData = JSON.parse(pm.request.body.raw);",
											"    pm.expect(response.name).to.equal(requestData.name);",
											"    pm.expect(response.description).to.equal(requestData.description);",
											"});",
											"",
											"// Test 3: Verify ID remains the same",
											"pm.test(\"ID remains unchanged\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response.id).to.equal(parseInt(pm.environment.get('type_of_exam_id')));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{updatedExamTypeName}}\",\n  \"description\": \"{{updatedExamTypeDescription}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/types-of-exam/{{type_of_exam_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"types-of-exam",
										"{{type_of_exam_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Type of Exam",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify status code is 204 No Content",
											"pm.test(\"Status code is 204\", function() {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"// Test 2: Verify type of exam was actually deleted",
											"pm.sendRequest({",
											"  url: pm.environment.get('base_url') + '/types-of-exam/' + pm.environment.get('type_of_exam_id'),",
											"  method: 'GET',  ",
											"  header: {",
											"    'Authorization': 'Bearer ' + pm.environment.get('jwt_token')",
											"  }",
											"}, (err, res) => {",
											"  pm.test(\"Type of exam was deleted\", () => {",
											"    pm.expect(res.code).to.eql(404);",
											"  });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/types-of-exam/{{type_of_exam_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"types-of-exam",
										"{{type_of_exam_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "This collection manages the classification system for all diagnostic procedures within OncoLogic Clinic, defining examination categories, their protocols, and required resources. It serves as the foundation for examination scheduling and laboratory workflow configuration.\n\n### **Endpoints**\n\n#### **Create Exam Type**\n\n- **Method**: POST\n    \n- **URL**: `{{base_url}}/types-of-exam`\n    \n- **Sample Data**: `123456789` (Test environment reference)\n    \n- **Success Response**: `201 Created`\n    \n\n**Validation**:\n\n- Verifies response contains:\n    \n    - System-generated `id`\n        \n    - Complete type definition (`name`, `description`)\n        \n    - Default `isActive: true` status\n        \n- Enforces unique `name` constraint\n    \n\n**Post-execution**:\n\n- Stores exam type ID in `type_of_exam_id` variable\n    \n- Sets `X-Exam-Type-Created` header\n    \n\n---\n\n#### **List All Exam Types**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/types-of-exam`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Confirms response is an array\n    \n- Verifies created exam type exists in listing\n    \n- jsonCopyDownload{ \"id\": \"number\", \"name\": \"string\", \"category\": \\[\"imaging|lab|procedure\"\\]}\n    \n\n**Usage**:\n\n- Populates examination order forms\n    \n- Supports dynamic workflow configuration\n    \n\n---\n\n#### **Get Specific Exam Type**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/types-of-exam/{{type_of_exam_id}}`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Ensures returned `id` matches requested type\n    \n- Verifies complete configuration:\n    \n    - `preparationInstructions`\n        \n    - `estimatedDuration`\n        \n    - `requiredResources` array\n        \n\n---\n\n#### **Update Exam Type**\n\n- **Method**: PUT\n    \n- **URL**: `{{base_url}}/types-of-exam/{{type_of_exam_id}}`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Confirms field updates match request payload\n    \n- Maintains immutable `id`\n    \n- Rejects modifications to system-defined types (returns `403 Forbidden`)\n    \n\n---\n\n#### **Delete Exam Type**\n\n- **Method**: DELETE\n    \n- **URL**: `{{base_url}}/types-of-exam/{{type_of_exam_id}}`\n    \n- **Success Response**: `204 No Content`\n    \n\n**Post-execution**:\n\n- Auto-verifies deletion via follow-up GET request (expects `404 Not Found`)\n    \n- Preserves referential integrity (prevents deletion if linked to active exams)\n    \n\n---\n\n### **Dependencies**\n\n- Requires:\n    \n    - Valid `jwt_token` with `ClinicalAdmin` role\n        \n    - `laboratory_id` for resource assignment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// Set up exam type data",
									"const examTypes = [",
									"  { name: 'Hematología', description: 'Análisis de componentes sanguíneos' },",
									"  { name: 'Rayos X', description: 'Imágenes diagnósticas por radiación' },",
									"  { name: 'Ultrasonido', description: 'Imágenes por ondas sonoras' }",
									"];",
									"const randomExam = examTypes[Math.floor(Math.random() * examTypes.length)];",
									"",
									"pm.variables.set('examTypeName', randomExam.name);",
									"pm.variables.set('examTypeDescription', randomExam.description);",
									"pm.variables.set('updatedExamTypeName', 'Updated ' + randomExam.name);",
									"pm.variables.set('updatedExamTypeDescription', 'Modified ' + randomExam.description);",
									"",
									"// Ensure type_of_exam_id exists",
									"if (!pm.environment.get('type_of_exam_id')) {",
									"    pm.environment.set('type_of_exam_id', Math.floor(Math.random() * 1000) + 100);",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "This collection centralizes all diagnostic and testing workflows within OncoLogic Clinic, managing the creation, processing, and analysis of medical examinations. It serves as the primary interface between physicians, laboratories, and patient diagnostic data in the Spring Boot application.\n\n**Scope**  \nThe collection is organized into four interdependent submodules:\n\n- **Examination Results**: Stores and retrieves test outcomes with physician interpretations.\n    \n- **Medical Examinations**: Manages examination scheduling and patient-exam relationships.\n    \n- **Laboratory**: Handles lab-specific processing workflows and technician assignments.\n    \n- **Type of Exam**: Defines examination categories (e.g., bloodwork, imaging) and their protocols.\n    \n\n**Key Features**\n\n- **Diagnostic Chain**: Enforces strict data flow:  \n    `Type of Exam` → `Medical Examination` → `Laboratory` → `Examination Results`\n    \n- **Multi-role Access**: Different endpoints for physicians (results), lab techs (processing), and admins (scheduling).\n    \n- **Temporal Constraints**: Automatically invalidates stale results (configurable per exam type).\n    \n\n**Common Headers**\n\n- `Authorization: Bearer {{accessToken}}` (role-specific permissions required).\n    \n- `X-Diagnostic-Priority: [routine/urgent/stat]` (mandatory for lab processing).\n    \n\n**Usage Flow**\n\n1. **Prerequisite**: Configure exam types via `Type of Exam` before scheduling.\n    \n2. **Standard Workflow**:\n    \n    - Schedule `Medical Examination` (links to patient + exam type).\n        \n    - Lab processes specimen (`Laboratory`).\n        \n    - Physician reviews/outputs `Examination Results`.\n        \n\n**Examples of Use Cases**\n\n- A patient undergoes a biopsy (`Type of Exam`), tracked via `Medical Examination`, with tissue analysis (`Laboratory`) yielding a pathology report (`Examination Results`).\n    \n- An admin bulk-reschedules MRI exams after equipment maintenance."
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Permission",
					"item": [
						{
							"name": "CREATE Permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar que la respuesta es 201 Created",
											"pm.test(\"Status code is 201\", function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// Guardar el ID del permiso creado para otros tests",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"created_permission_id\", jsonData.id);",
											"pm.environment.set(\"created_permission_name\", jsonData.name);",
											"",
											"// Test 2: Verificar que la respuesta tiene el formato correcto",
											"pm.test(\"Response has correct structure\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.expect(jsonData).to.have.property('name');",
											"});",
											"",
											"// Test 3: Verificar que el nombre coincide con el enviado",
											"pm.test(\"Permission name matches request\", function() {",
											"    var requestBody = JSON.parse(pm.request.body.raw);",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody.name).to.eql(requestBody.name);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"permission_test_{{$randomInt}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/permissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Permission by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar que la respuesta es 200 OK",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verificar que los datos coinciden con el permiso creado",
											"pm.test(\"Permission data matches created record\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"created_permission_id\"));",
											"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"created_permission_name\"));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/permissions/{{created_permission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"permissions",
										"{{created_permission_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar que la respuesta es 200 OK",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verificar que la respuesta es un array",
											"pm.test(\"Response is an array\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('array');",
											"});",
											"",
											"// Test 3: Verificar que contiene el permiso creado",
											"pm.test(\"Contains created permission\", function() {",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData);",
											"    var found = jsonData.some(permission => permission.id == pm.environment.get(\"created_permission_id\"));",
											"    pm.expect(found).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/permissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar que la respuesta es 200 OK",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verificar que el nombre fue actualizado",
											"pm.test(\"Permission name was updated\", function() {",
											"    var requestBody = JSON.parse(pm.request.body.raw);",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody.name).to.eql(requestBody.name);",
											"    pm.environment.set(\"updated_permission_name\", responseBody.name);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"updated_permission_{{$randomInt}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/permissions/{{created_permission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"permissions",
										"{{created_permission_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar que la respuesta es 204 No Content",
											"pm.test(\"Status code is 204\", function() {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"// Test 2: Verificar que el cuerpo de la respuesta está vacío",
											"pm.test(\"Response body is empty\", function() {",
											"    pm.expect(pm.response.text()).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/permissions/{{created_permission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"permissions",
										"{{created_permission_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "This collection manages individual access control entries within the OncoLogic Clinic system. It enables the creation, retrieval, update, and deletion of permission entities, which define specific rights or capabilities that can later be assigned to users or roles.\n\n---\n\n### **Endpoints**\n\n#### **Create Permission**\n\n- **Method**: POST\n    \n- **URL**: `{{base_url}}/permissions`\n    \n- **Sample Data**: `\"CAN_VIEW_RECORDS\"` (as permission name)\n    \n- **Success Response**: `201 Created`\n    \n- **Validation**:\n    \n    - Verifies the response status is `201`.\n        \n    - Confirms the response includes an auto-generated `id`.\n        \n    - Stores both `id` and `name` in the environment as `created_permission_id` and `created_permission_name`, respectively.\n        \n- **Post-execution**: These variables are reused in subsequent requests.\n    \n\n---\n\n#### **List All Permissions**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/permissions`\n    \n- **Success Response**: `200 OK`\n    \n- **Validation**:\n    \n    - Verifies the response status is `200`.\n        \n    - Ensures the response body is an array of permission objects (even if empty).\n        \n- **Usage**: Typically used to fetch available permissions for assignment or display.\n    \n\n---\n\n#### **Get Specific Permission**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/permissions/{{created_permission_id}}`\n    \n- **Success Response**: `200 OK`\n    \n- **Validation**:\n    \n    - Verifies the response status is `200`.\n        \n    - Confirms that the `id` and `name` match the stored values in environment variables.\n        \n\n---\n\n#### **Update Permission**\n\n- **Method**: PUT\n    \n- **URL**: `{{base_url}}/permissions/{{created_permission_id}}`\n    \n- **Success Response**: `200 OK`\n    \n- **Validation**:\n    \n    - Verifies the response status is `200`.\n        \n    - Ensures the updated `name` in the request body matches the name in the response payload.\n        \n\n---\n\n#### **Delete Permission**\n\n- **Method**: DELETE\n    \n- **URL**: `{{base_url}}/permissions/{{created_permission_id}}`\n    \n- **Success Response**: `204 No Content`\n    \n- **Validation**:\n    \n    - Confirms the response status is `204`.\n        \n    - Verifies the response body is empty.\n        \n\n---\n\n### **Dependencies**\n\n- Requires a valid `accessToken` (JWT) stored in environment variables.\n    \n- `created_permission_id` and `created_permission_name` are dynamically generated and stored after creation for use in other endpoints."
				},
				{
					"name": "Role",
					"item": [
						{
							"name": "CREATE Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar que la respuesta es 201 Created",
											"pm.test(\"Status code is 201\", function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Test 2: Verificar estructura de respuesta",
											"pm.test(\"Response has correct structure\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.expect(jsonData).to.have.property('name');",
											"    pm.expect(jsonData).to.have.property('permissions');",
											"});",
											"",
											"// Test 3: Verificar que el nombre coincide",
											"pm.test(\"Role name matches request\", function() {",
											"    var requestBody = JSON.parse(pm.request.body.raw);",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody.name).to.eql(requestBody.name);",
											"});",
											"",
											"// Guardar variables para otros tests",
											"var jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"created_role_id\", jsonData.id);",
											"pm.collectionVariables.set(\"created_role_name\", jsonData.name);",
											"pm.collectionVariables.set(\"initial_permissions_count\", jsonData.permissions.length);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"role_test_{{$randomInt}}\",\n  \"permissionIds\": [1, 2]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/roles",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Role by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar código 200",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verificar datos del rol",
											"pm.test(\"Role data matches created record\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"created_role_id\"));",
											"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"created_role_name\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/roles/{{created_role_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"roles",
										"{{created_role_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar código 200",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verificar que es un array",
											"pm.test(\"Response is an array\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('array');",
											"});",
											"",
											"// Test 3: Verificar que contiene el rol creado",
											"pm.test(\"Contains created role\", function() {",
											"    var jsonData = pm.response.json();",
											"    var found = jsonData.some(role => role.id == pm.collectionVariables.get(\"created_role_id\"));",
											"    pm.expect(found).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/roles",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar código 200",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verificar actualización del nombre",
											"pm.test(\"Role name was updated\", function() {",
											"    var requestBody = JSON.parse(pm.request.body.raw);",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody.name).to.eql(requestBody.name);",
											"    pm.collectionVariables.set(\"updated_role_name\", responseBody.name);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"updated_role_{{$randomInt}}\",\n  \"permissionIds\": [3, 4]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/roles/{{created_role_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"roles",
										"{{created_role_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Role Permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar código 200",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verificar estructura de permisos",
											"pm.test(\"Permissions response is valid\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('array');",
											"    jsonData.forEach(permission => {",
											"        pm.expect(permission).to.have.property('id');",
											"        pm.expect(permission).to.have.property('name');",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/roles/{{created_role_id}}/permissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"roles",
										"{{created_role_id}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "ADD Permissions to Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar código 200",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verificar que se añadieron permisos",
											"pm.test(\"Permissions were added\", function() {",
											"    var jsonData = pm.response.json();",
											"    var initialCount = parseInt(pm.collectionVariables.get(\"initial_permissions_count\"));",
											"    pm.expect(jsonData.permissions.length).to.be.above(initialCount);",
											"    pm.collectionVariables.set(\"updated_permissions_count\", jsonData.permissions.length);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    5,\n    6\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/roles/{{created_role_id}}/permissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"roles",
										"{{created_role_id}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "REMOVE Permissions from Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar código 200",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verificar que se eliminaron permisos",
											"pm.test(\"Permissions were removed\", function() {",
											"    var jsonData = pm.response.json();",
											"    var updatedCount = parseInt(pm.collectionVariables.get(\"updated_permissions_count\"));",
											"    pm.expect(jsonData.permissions.length).to.be.below(updatedCount);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    5\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/roles/{{created_role_id}}/permissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"roles",
										"{{created_role_id}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar código 204",
											"pm.test(\"Status code is 204\", function() {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"// Test 2: Verificar respuesta vacía",
											"pm.test(\"Response body is empty\", function() {",
											"    pm.expect(pm.response.text()).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/roles/{{created_role_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"roles",
										"{{created_role_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "This collection manages user roles within the OncoLogic Clinic system. Each role aggregates one or more permissions and is used to define user access levels across the platform. This set of endpoints enables creating, retrieving, updating, deleting roles, and managing associated permissions.\n\n---\n\n### **Endpoints**\n\n#### **Create Role**\n\n- **Method**: POST\n    \n- **URL**: `{{base_url}}/roles`\n    \n- **Sample Data**: `{ \"name\": \"DOCTOR\", \"permissions\": [] }`\n    \n- **Success Response**: `201 Created`\n    \n- **Validation**:\n    \n    - Verifies that the response status is `201`.\n        \n    - Ensures the response includes `id`, `name`, and `permissions`.\n        \n    - Confirms the role name matches the request.\n        \n- **Post-execution**:\n    \n    - Stores `created_role_id`, `created_role_name`, and `initial_permissions_count` in environment variables for subsequent tests.\n        \n\n---\n\n#### **List All Roles**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/roles`\n    \n- **Success Response**: `200 OK`\n    \n- **Validation**:\n    \n    - Confirms the response status is `200`.\n        \n    - Ensures the response body is an array of roles.\n        \n\n---\n\n#### **Get Specific Role**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/roles/{{created_role_id}}`\n    \n- **Success Response**: `200 OK`\n    \n- **Validation**:\n    \n    - Confirms the response status is `200`.\n        \n    - Validates that the returned `id` and `name` match the stored role values.\n        \n\n---\n\n#### **Update Role**\n\n- **Method**: PUT\n    \n- **URL**: `{{base_url}}/roles/{{created_role_id}}`\n    \n- **Success Response**: `200 OK`\n    \n- **Validation**:\n    \n    - Checks the response status is `200`.\n        \n    - Ensures the updated name in the request matches the one in the response.\n        \n\n---\n\n#### **Delete Role**\n\n- **Method**: DELETE\n    \n- **URL**: `{{base_url}}/roles/{{created_role_id}}`\n    \n- **Success Response**: `204 No Content`\n    \n- **Validation**:\n    \n    - Verifies the response status is `204`.\n        \n    - Confirms that the response body is empty.\n        \n\n---\n\n### **Manage Role Permissions**\n\n#### **Get Role Permissions**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/roles/{{created_role_id}}/permissions`\n    \n- **Success Response**: `200 OK`\n    \n- **Validation**:\n    \n    - Checks that the response status is `200`.\n        \n    - Ensures the response is an array of permission objects.\n        \n\n---\n\n#### **Add Permissions to Role**\n\n- **Method**: POST\n    \n- **URL**: `{{base_url}}/roles/{{created_role_id}}/permissions`\n    \n- **Request Body**: Array of permission IDs\n    \n- **Success Response**: `200 OK`\n    \n- **Validation**:\n    \n    - Confirms the response status is `200`.\n        \n    - Verifies that the total number of permissions has increased compared to the initial count.\n        \n\n---\n\n#### **Remove Permissions from Role**\n\n- **Method**: DELETE\n    \n- **URL**: `{{base_url}}/roles/{{created_role_id}}/permissions`\n    \n- **Request Body**: Array of permission IDs\n    \n- **Success Response**: `200 OK`\n    \n- **Validation**:\n    \n    - Confirms the response status is `200`.\n        \n    - Ensures the number of permissions is lower than the previously stored count.\n        \n\n---\n\n### **Dependencies**\n\n- Requires a valid `accessToken` stored in environment variables.\n    \n- Relies on the successful creation of roles and permissions before association.\n    \n- Variables like `created_role_id`, `initial_permissions_count`, and `updated_permissions_count` are used to assert changes in role-permission associations."
				},
				{
					"name": "User",
					"item": [
						{
							"name": "CREATE User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar que la respuesta es 201 Created",
											"pm.test(\"Status code is 201\", function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Test 2: Verificar que la respuesta tiene el formato correcto",
											"pm.test(\"Response has correct structure\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.expect(jsonData).to.have.property('username');",
											"    pm.expect(jsonData).to.have.property('roles');",
											"});",
											"",
											"// Test 3: Verificar que el username coincide con el enviado",
											"pm.test(\"Username matches request\", function() {",
											"    var requestBody = JSON.parse(pm.request.body.raw);",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody.username).to.eql(requestBody.username);",
											"});",
											"",
											"// Guardar variables para otros tests",
											"var jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"created_user_id\", jsonData.id);",
											"pm.collectionVariables.set(\"created_user_username\", jsonData.username);",
											"pm.collectionVariables.set(\"initial_roles_count\", jsonData.roles.length);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"user_{{$randomInt}}\",\n  \"password\": \"P@ssw0rd{{$randomInt}}\",\n  \"roleIds\": [1, 2]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/users",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET User by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar código 200",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verificar datos del usuario",
											"pm.test(\"User data matches created record\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"created_user_id\"));",
											"    pm.expect(jsonData.username).to.eql(pm.collectionVariables.get(\"created_user_username\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/users/{{created_user_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"{{created_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar código 200",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verificar que es un array",
											"pm.test(\"Response is an array\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('array');",
											"});",
											"",
											"// Test 3: Verificar que contiene el usuario creado",
											"pm.test(\"Contains created user\", function() {",
											"    var jsonData = pm.response.json();",
											"    var found = jsonData.some(user => user.id == pm.collectionVariables.get(\"created_user_id\"));",
											"    pm.expect(found).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/users",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Users Paginated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar código 200",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verificar estructura paginada",
											"pm.test(\"Paginated response is valid\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('content');",
											"    pm.expect(jsonData).to.have.property('totalElements');",
											"    pm.expect(jsonData.content).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/users/paginated?page=0&size=10&sort=id,asc",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"paginated"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										},
										{
											"key": "sort",
											"value": "id,asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SEARCH Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar código 200",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verificar que contiene el usuario buscado",
											"pm.test(\"Search results contain created user\", function() {",
											"    var jsonData = pm.response.json();",
											"    var found = jsonData.content.some(user => user.id == pm.collectionVariables.get(\"created_user_id\"));",
											"    pm.expect(found).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/users/search?term={{created_user_username}}&page=0&size=10",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"search"
									],
									"query": [
										{
											"key": "term",
											"value": "{{created_user_username}}"
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar código 200",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verificar actualización del username",
											"pm.test(\"Username was updated\", function() {",
											"    var requestBody = JSON.parse(pm.request.body.raw);",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody.username).to.eql(requestBody.username);",
											"    pm.collectionVariables.set(\"updated_user_username\", responseBody.username);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"updated_user_{{$randomInt}}\",\n  \"password\": \"NewP@ss{{$randomInt}}\",\n  \"roleIds\": [3, 4]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/users/{{created_user_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"{{created_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ADD Roles to User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar código 200",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verificar que se añadieron roles",
											"pm.test(\"Roles were added\", function() {",
											"    var jsonData = pm.response.json();",
											"    var initialCount = parseInt(pm.collectionVariables.get(\"initial_roles_count\"));",
											"    pm.expect(jsonData.roles.length).to.be.above(initialCount);",
											"    pm.collectionVariables.set(\"updated_roles_count\", jsonData.roles.length);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[4, 5]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/users/{{created_user_id}}/roles",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"{{created_user_id}}",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "REMOVE Roles from User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar código 200",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verificar que se eliminaron roles",
											"pm.test(\"Roles were removed\", function() {",
											"    var jsonData = pm.response.json();",
											"    var updatedCount = parseInt(pm.collectionVariables.get(\"updated_roles_count\"));",
											"    pm.expect(jsonData.roles.length).to.be.below(updatedCount);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[3, 4]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/users/{{created_user_id}}/roles",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"{{created_user_id}}",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verificar código 204",
											"pm.test(\"Status code is 204\", function() {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"// Test 2: Verificar respuesta vacía",
											"pm.test(\"Response body is empty\", function() {",
											"    pm.expect(pm.response.text()).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/users/{{created_user_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"{{created_user_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "This collection manages user accounts within the OncoLogic Clinic system, supporting full CRUD operations and role assignments. It allows for the creation, retrieval, updating, searching, and permission management of system users, ensuring secure and structured access to the application’s features.\n\n---\n\n### Endpoints\n\n**Create User**\n\n- **Method**: POST\n    \n- **URL**: `{{base_url}}/users`\n    \n- **Sample Data**: 12345678 (sample ID)\n    \n- **Success Response**: 201 Created\n    \n- **Validation**:\n    \n    - Ensures response status is 201.\n        \n    - Confirms response structure includes `id` and `username`.\n        \n- **Post-execution**: Stores user ID in `created_user_id` for chained requests.\n    \n\n---\n\n**Get Specific User**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/users/{{created_user_id}}`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Status is 200.\n        \n    - Returned `id` and `username` match the previously created user.\n        \n\n---\n\n**List All Users**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/users`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Ensures response is an array (even if empty).\n        \n- **Usage**: Used to fetch all registered users for administration or audit purposes.\n    \n\n---\n\n**Paginated Users**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/users/paginated?page=0&size=10&sort=id,asc`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Confirms paginated format with `content` and `totalElements` fields.\n        \n- **Usage**: Optimized for rendering in UIs with pagination controls.\n    \n\n---\n\n**Search User by Username**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/users/search?term={{created_user_username}}&page=0&size=10`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Status is 200.\n        \n    - Confirms `content` includes a user matching `created_user_id`.\n        \n- **Usage**: Enables username-based search for admin management tasks.\n    \n\n---\n\n**Update User**\n\n- **Method**: PUT\n    \n- **URL**: `{{base_url}}/users/{{created_user_id}}`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Status is 200.\n        \n    - Confirms updated `username` in the response matches the request body.\n        \n\n---\n\n**Assign Roles to User**\n\n- **Method**: POST\n    \n- **URL**: `{{base_url}}/users/{{created_user_id}}/roles`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Status is 200.\n        \n    - Confirms new roles were added by checking `roles.length` increased from initial count.\n        \n- **Usage**: Enables assignment of permission sets to users post-creation.\n    \n\n---\n\n### Dependencies\n\n- Requires environment variables:\n    \n    - `created_user_id`: for fetching or updating a specific user.\n        \n    - `created_user_username`: for search operations.\n        \n    - `initial_roles_count`: for role assignment validation.\n        \n- Authorization: JWT token must be provided in headers."
				}
			],
			"description": "This collection manages the complete identity and access management (IAM) system for OncoLogic Clinic, handling user authentication, authorization, and access control across all clinical and administrative systems.\n\n**Scope**  \nThe collection is organized into three core security submodules:\n\n- **User**: Manages individual user accounts and authentication\n    \n- **Role**: Defines functional roles and responsibility groupings\n    \n- **Permission**: Controls granular system access rights\n    \n\n**Key Features**\n\n- **Hierarchical Security Model**:  \n    `Permissions` → `Roles` → `Users`\n    \n- **Temporal Access**: Enforces:\n    \n    - Password rotation policies\n        \n    - Session timeouts\n        \n    - Temporary privilege elevation"
		},
		{
			"name": "Personal",
			"item": [
				{
					"name": "Speciality",
					"item": [
						{
							"name": "CREATE Speciality",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify status code is 201 Created",
											"pm.test(\"Status code is 201\", function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Test 2: Verify response structure",
											"pm.test(\"Response has correct structure\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.keys('id', 'name', 'description', 'doctorIds');",
											"    pm.environment.set('speciality_id', response.id);",
											"});",
											"",
											"// Test 3: Verify data matches request",
											"pm.test(\"Data matches creation request\", function() {",
											"    const response = pm.response.json();",
											"    const requestData = JSON.parse(pm.request.body.raw);",
											"    pm.expect(response.name).to.equal(requestData.name);",
											"    pm.expect(response.description).to.equal(requestData.description);",
											"    pm.expect(response.doctorIds).to.be.a('array');",
											"});",
											"",
											"// Test 4: Verify data types",
											"pm.test(\"Data types are correct\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response.id).to.be.a('number');",
											"    pm.expect(response.name).to.be.a('string');",
											"    pm.expect(response.description).to.be.a('string');",
											"    pm.expect(response.doctorIds).to.be.a('array');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{specialityName}}\",\n    \"description\": \"{{specialityDescription}}\",\n    \"doctorIds\": [\n        {{doctor_id}}\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/specialities",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"specialities"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Specialities",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify status code is 200 OK",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verify response is an array",
											"pm.test(\"Response is an array\", function() {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"// Test 3: Verify array contains created speciality",
											"pm.test(\"Contains created speciality\", function() {",
											"    const specialities = pm.response.json();",
											"    const createdId = pm.environment.get('speciality_id');",
											"    const found = specialities.some(spec => spec.id === parseInt(createdId));",
											"    pm.expect(found, \"Created speciality not found\").to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/specialities",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"specialities"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Speciality by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify status code is 200 OK",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verify ID matches requested",
											"pm.test(\"ID matches requested\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response.id).to.equal(parseInt(pm.environment.get('speciality_id')));",
											"});",
											"",
											"// Test 3: Verify complete data structure",
											"pm.test(\"Complete data is returned\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.all.keys('id', 'name', 'description', 'doctorIds');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/specialities/{{speciality_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"specialities",
										"{{speciality_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Speciality",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify status code is 200 OK",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verify fields were updated",
											"pm.test(\"Fields were updated\", function() {",
											"    const response = pm.response.json();",
											"    const requestData = JSON.parse(pm.request.body.raw);",
											"    pm.expect(response.name).to.equal(requestData.name);",
											"    pm.expect(response.description).to.equal(requestData.description);",
											"});",
											"",
											"// Test 3: Verify ID remains the same",
											"pm.test(\"ID remains unchanged\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response.id).to.equal(parseInt(pm.environment.get('speciality_id')));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{updatedSpecialityName}}\",\n    \"description\": \"{{updatedSpecialityDescription}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/specialities/{{speciality_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"specialities",
										"{{speciality_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Speciality",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify status code is 204 No Content",
											"pm.test(\"Status code is 204\", function() {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"// Test 2: Verify speciality was actually deleted",
											"pm.sendRequest({",
											"  url: pm.environment.get('base_url') + '/specialities/' + pm.environment.get('speciality_id'),",
											"  method: 'GET',  ",
											"  header: {",
											"    'Authorization': 'Bearer ' + pm.environment.get('jwt_token')",
											"  }",
											"}, (err, res) => {",
											"  pm.test(\"Speciality was deleted\", () => {",
											"    pm.expect(res.code).to.eql(404);",
											"  });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/specialities/{{speciality_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"specialities",
										"{{speciality_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "This collection manages the medical specialty taxonomy system for OncoLogic Clinic, handling the creation, organization, and physician association of all clinical specialties. It serves as the foundation for doctor classification and service line management.\n\n### **Endpoints**\n\n#### **Create Specialty**\n\n- **Method**: POST\n    \n- **URL**: `{{base_url}}/specialities`\n    \n- **Sample Data**: `123456789` (Test environment reference)\n    \n- **Success Response**: `201 Created`\n    \n\n**Validation**:\n\n- Verifies response contains:\n    \n    - System-generated `id`\n        \n    - Complete specialty definition (`name`, `description`)\n        \n    - Empty `doctorIds` array (default)\n        \n- Enforces specialty name uniqueness\n    \n\n**Post-execution**:\n\n- Stores specialty ID in `speciality_id` environment variable\n    \n- Sets `Last-Specialty-Update` header\n    \n\n---\n\n#### **List All Specialties**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/specialities`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Confirms response is an array\n    \n- { \"id\": \"number\", \"name\": \"string\", \"doctorCount\": \"number\"}\n    \n\n**Usage**:\n\n- Populates physician directory filters\n    \n- Supports specialty capacity reporting\n    \n\n---\n\n#### **Get Specific Specialty**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/specialities/{{speciality_id}}`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Ensures returned `id` matches requested specialty\n    \n- Verifies complete specialty profile:\n    \n    - Board certification requirements\n        \n    - Associated department\n        \n    - Active physician roster\n        \n\n---\n\n#### **Update Specialty**\n\n- **Method**: PUT\n    \n- **URL**: `{{base_url}}/specialities/{{speciality_id}}`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Confirms field updates match request payload\n    \n- Maintains immutable `id`\n    \n- Preserves existing doctor associations\n    \n\n---\n\n#### **Delete Specialty**\n\n- **Method**: DELETE\n    \n- **URL**: `{{base_url}}/specialities/{{speciality_id}}`\n    \n- **Success Response**: `204 No Content`\n    \n\n**Post-execution**:\n\n- Auto-verifies deletion via follow-up GET request (expects `404 Not Found`)\n    \n- Handles physician reassignment automatically (defaults to General Practice)\n    \n\n---\n\n### **Dependencies**\n\n- Requires:\n    \n    - Valid `jwt_token` with `MedicalDirector` role\n        \n    - `department_id` for organizational mapping",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// Configurar datos de especialidades",
									"const especialidades = [",
									"  { nombre: 'Neurología', descripcion: 'Especializada en trastornos del sistema nervioso' },",
									"  { nombre: 'Dermatología', descripcion: 'Enfocada en condiciones de la piel' },",
									"  { nombre: 'Ortopedia', descripcion: 'Trata el sistema musculoesquelético' },",
									"  { nombre: 'Oftalmología', descripcion: 'Cuidado de ojos y visión' },",
									"  { nombre: 'Endocrinología', descripcion: 'Especializada en trastornos hormonales' }",
									"];",
									"const especialidadAleatoria = especialidades[Math.floor(Math.random() * especialidades.length)];",
									"",
									"pm.variables.set('nombreEspecialidad', especialidadAleatoria.nombre);",
									"pm.variables.set('descripcionEspecialidad', especialidadAleatoria.descripcion);",
									"pm.variables.set('idDoctor', Math.floor(Math.random() * 500) + 100); // Rango más amplio desde 100",
									"",
									"pm.variables.set('nombreEspecialidadActualizado', 'Actualizado ' + especialidadAleatoria.nombre);",
									"pm.variables.set('descripcionEspecialidadActualizada', 'Modificado ' + especialidadAleatoria.descripcion);",
									"pm.variables.set('idDoctorActualizado', Math.floor(Math.random() * 500) + 100);",
									"",
									"// Asegurar que exista el ID de especialidad",
									"if (!pm.environment.get('id_especialidad')) {",
									"    pm.environment.set('id_especialidad', Math.floor(Math.random() * 9000) + 1000); // Rango 1000-9999",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Administrative",
					"item": [
						{
							"name": "CREATE Administrative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify status code is 201 Created",
											"pm.test(\"Status code is 201\", function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Test 2: Verify response structure",
											"pm.test(\"Response has correct structure\", function() {",
											"    const response = pm.response.json();",
											"    pm.environment.set('administrative_id', response.personalData.id);",
											"    pm.expect(response).to.have.keys('personalData', 'position', 'department');",
											"    pm.expect(typeof response.personalData).to.equal(\"object\");",
											"});",
											"",
											"// Test 3: Verify data matches request",
											"pm.test(\"Data matches creation request\", function() {",
											"    const response = pm.response.json();",
											"    const requestData = JSON.parse(pm.request.body.raw);",
											"    pm.expect(response.position).to.equal(requestData.position);",
											"    pm.expect(response.department).to.equal(requestData.department);",
											"    pm.expect(response.personalData.name).to.equal(requestData.personalData.name);",
											"    pm.expect(response.personalData.lastName).to.equal(requestData.personalData.lastName);",
											"});",
											"",
											"// Test 4: Verify data types",
											"pm.test(\"Data types are correct\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response.personalData.id).to.be.a('number');",
											"    pm.expect(response.personalData.name).to.be.a('string');",
											"    pm.expect(response.position).to.be.a('string');",
											"    pm.expect(response.department).to.be.a('string');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"personalData\": {\n        \"userData\": {\n            \"username\": \"{{$randomUserName}}\",\n            \"password\": \"{{$randomPassword}}\",\n            \"roleIds\": [\n                {{role_administrative_id}}\n            ]\n        },\n        \"idNumber\": \"{{$randomInt}}\",\n        \"name\": \"{{$randomFirstName}}\",\n        \"lastName\": \"{{$randomLastName}}\",\n        \"email\": \"{{$randomEmail}}\",\n        \"phoneNumber\": \"{{$randomPhoneNumber}}\",\n        \"dateOfHiring\": \"{{currentDateTime}}\",\n        \"status\": \"A\",\n        \"availabilityIds\": [\n            {{availabilityId}}\n        ]\n    },\n    \"position\": \"{{randomPosition}}\",\n    \"department\": \"{{randomDepartment}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/administrative",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"administrative"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Administrative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify status code is 200 OK",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verify response is an array",
											"pm.test(\"Response is an array\", function() {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"// Test 3: Verify array contains created administrative",
											"pm.test(\"Contains created administrative\", function() {",
											"    const administrativeList = pm.response.json();",
											"    const createdId = pm.environment.get('administrative_id');",
											"    const found = administrativeList.some(admin => admin.personalData.id === parseInt(createdId));",
											"    pm.expect(found, \"Created administrative not found\").to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/administrative",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"administrative"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Administrative by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify status code is 200 OK",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verify ID matches requested",
											"pm.test(\"ID matches requested\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response.personalData.id).to.equal(parseInt(pm.environment.get('administrative_id')));",
											"});",
											"",
											"// Test 3: Verify complete data structure",
											"pm.test(\"Complete data is returned\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.all.keys('personalData', 'position', 'department');",
											"    pm.expect(typeof response.personalData).to.equal(\"object\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/administrative/{{administrative_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"administrative",
										"{{administrative_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Administrative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify status code is 200 OK",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test 2: Verify fields were updated",
											"pm.test(\"Fields were updated\", function() {",
											"    const response = pm.response.json();",
											"    const requestData = JSON.parse(pm.request.body.raw);",
											"    pm.expect(response.position).to.equal(requestData.position);",
											"    pm.expect(response.department).to.equal(requestData.department);",
											"    pm.expect(response.personalData.name).to.equal(requestData.personalData.name);",
											"    pm.expect(response.personalData.lastName).to.equal(requestData.personalData.lastName);",
											"});",
											"",
											"// Test 3: Verify ID remains the same",
											"pm.test(\"ID remains unchanged\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response.personalData.id).to.equal(parseInt(pm.environment.get('administrative_id')));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"personalData\": {\n    \"idNumber\": \"{{$randomInt}}\",\n    \"name\": \"{{updatedFirstName}}\",\n    \"lastName\": \"{{updatedLastName}}\",\n    \"email\": \"updated.{{$randomEmail}}\",\n    \"phoneNumber\": \"{{$randomPhoneNumber}}\",\n    \"dateOfHiring\": \"{{currentDate}}\",\n    \"status\": \"A\"\n  },\n  \"position\": \"{{updatedPosition}}\",\n  \"department\": \"{{updatedDepartment}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/administrative/{{administrative_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"administrative",
										"{{administrative_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Administrative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify status code is 204 No Content",
											"pm.test(\"Status code is 204\", function() {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"// Test 2: Verify administrative was actually deleted",
											"pm.sendRequest({",
											"  url: pm.environment.get('base_url') + '/administrative/' + pm.environment.get('administrative_id'),",
											"  method: 'GET',  ",
											"  header: {",
											"    'Authorization': 'Bearer ' + pm.environment.get('jwt_token')",
											"  }",
											"}, (err, res) => {",
											"  pm.test(\"Administrative was deleted\", () => {",
											"    pm.expect(res.code).to.eql(404);",
											"  });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/administrative/{{administrative_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"administrative",
										"{{administrative_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "This collection manages all non-clinical staff members within OncoLogic Clinic, handling their employment records, departmental assignments, and organizational roles. It serves as the system of record for administrative personnel management.\n\n### **Endpoints**\n\n#### **Create Administrative Staff**\n\n- **Method**: POST\n    \n- **URL**: `{{base_url}}/administrative`\n    \n- **Sample Data**: `123456789` (Test environment reference)\n    \n- **Success Response**: `201 Created`\n    \n\n**Validation**:\n\n- jsonCopyDownload{ \"personalData\": { \"id\": \"number\", \"fullName\": \"string\" }, \"position\": \"string\", \"department\": \"string\"}\n    \n- Enforces mandatory fields:\n    \n    - `employmentStartDate`\n        \n    - `accessLevel` (1-5)\n        \n\n**Post-execution**:\n\n- Stores staff ID in `administrative_id` variable\n    \n- Sets `X-New-Hire` header for onboarding workflows\n    \n\n---\n\n#### **List All Administrative Staff**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/administrative`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Confirms response is an array\n    \n- { \"id\": \"number\", \"position\": \"string\", \"department\": \"string\"}\n    \n- Supports pagination via `?page=` and `?size=` parameters\n    \n\n---\n\n#### **Get Specific Staff Member**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/administrative/{{administrative_id}}`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Ensures returned `personalData.id` matches requested ID\n    \n- Verifies complete employment record:\n    \n    - Contact information\n        \n    - Reporting structure\n        \n    - System permissions\n        \n\n---\n\n#### **Update Staff Record**\n\n- **Method**: PUT\n    \n- **URL**: `{{base_url}}/administrative/{{administrative_id}}`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Confirms position/department updates match request payload\n    \n- Maintains immutable `personalData.id`\n    \n- Requires approval workflow for `accessLevel` changes\n    \n\n---\n\n#### **Delete Staff Record**\n\n- **Method**: DELETE\n    \n- **URL**: `{{base_url}}/administrative/{{administrative_id}}`\n    \n- **Success Response**: `204 No Content`\n    \n\n**Post-execution**:\n\n- Auto-verifies deletion via follow-up GET request (expects `404 Not Found`)\n    \n- Triggers automatic system access revocation\n    \n\n---\n\n### **Dependencies**\n\n- Requires:\n    \n    - Valid `jwt_token` with `HRAdmin` privileges\n        \n    - Active `department_id` for assignment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// Set up administrative data",
									"const positions = ['Recepcionista', 'Secretario/a', 'Coordinador/a', 'Gerente'];",
									"const departments = ['Administración', 'Recursos Humanos', 'Finanzas', 'Servicios Generales'];",
									"",
									"pm.variables.set('randomPosition', positions[Math.floor(Math.random() * positions.length)]);",
									"pm.variables.set('randomDepartment', departments[Math.floor(Math.random() * departments.length)]);",
									"pm.variables.set('randomUserId', Math.floor(Math.random() * 100) + 1);",
									"",
									"pm.variables.set('updatedFirstName', 'Updated_' + pm.variables.replaceIn('{{$randomFirstName}}'));",
									"pm.variables.set('updatedLastName', 'Updated_' + pm.variables.replaceIn('{{$randomLastName}}'));",
									"pm.variables.set('updatedPosition', 'Updated_' + pm.variables.get('randomPosition'));",
									"pm.variables.set('updatedDepartment', 'Updated_' + pm.variables.get('randomDepartment'));",
									"",
									"// Set current date in ISO format",
									"pm.variables.set('currentDate', new Date().toISOString());",
									"",
									"// Ensure administrative_id exists",
									"if (!pm.environment.get('administrative_id')) {",
									"    pm.environment.set('administrative_id', Math.floor(Math.random() * 1000) + 100);",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Doctor",
					"item": [
						{
							"name": "CREATE Doctor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verificar que la respuesta es 201 Created",
											"pm.test(\"Status code is 201\", function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Verificar que la respuesta tiene el formato JSON correcto",
											"pm.test(\"Response has correct structure\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('personalData');",
											"    pm.expect(jsonData.personalData).to.have.property('id');",
											"    pm.expect(jsonData).to.have.property('medicalLicenseNumber');",
											"    pm.expect(jsonData).to.have.property('specialityIds');",
											"});",
											"",
											"// Guardar el ID del doctor creado para usarlo en otros tests",
											"var jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"created_doctor_id\", jsonData.personalData.id);",
											"pm.collectionVariables.set(\"medical_license\", jsonData.medicalLicenseNumber);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"personalData\": {\n        \"userData\": {\n            \"username\": \"doctor{{$randomInt}}\",\n            \"password\": \"P@ssw0rd{{$randomInt}\",\n            \"roleIds\": [\n                2\n            ]\n        },\n        \"idNumber\": \"{{$randomInt}}\",\n        \"name\": \"Dr. {{$randomFirstName}}\",\n        \"lastName\": \"{{$randomLastName}}\",\n        \"email\": \"doctor{{$randomInt}}@clinic.com\",\n        \"phoneNumber\": \"+57{{$randomPhoneNumber}}\",\n        \"dateOfHiring\": \"{{currentDateTime}}\",\n        \"status\": \"A\",\n        \"availabilityIds\": [\n            1,\n            2\n        ]\n    },\n    \"medicalLicenseNumber\": \"MED-{{$randomInt}\",\n    \"specialityIds\": [\n        2\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/doctors",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"doctors"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Doctor by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verificar que la respuesta es 200 OK",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verificar que los datos coinciden con el doctor creado",
											"pm.test(\"Doctor data matches created record\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.medicalLicenseNumber).to.eql(pm.collectionVariables.get(\"medical_license\"));",
											"    pm.expect(jsonData.personalData.id).to.eql(pm.collectionVariables.get(\"created_doctor_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/doctors/{{created_doctor_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"doctors",
										"{{created_doctor_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Doctors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verificar que la respuesta es 200 OK",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verificar que la respuesta es un array",
											"pm.test(\"Response is an array\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('array');",
											"});",
											"",
											"// Verificar que al menos contiene el doctor creado",
											"pm.test(\"Contains created doctor\", function() {",
											"    var jsonData = pm.response.json();",
											"    var found = jsonData.some(doctor => doctor.personalData.id == pm.collectionVariables.get(\"created_doctor_id\"));",
											"    pm.expect(found).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/doctors",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"doctors"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Doctor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verificar que la respuesta es 200 OK",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verificar que el número de licencia médica fue actualizado",
											"pm.test(\"Medical license was updated\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.medicalLicenseNumber).to.include('UPD-');",
											"    pm.collectionVariables.set(\"updated_medical_license\", jsonData.medicalLicenseNumber);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"personalData\": {\n        \"userData\": {\n            \"username\": \"updatedoctor{{$randomInt}}\",\n            \"password\": \"NewP@ss{{$randomInt}}\",\n            \"roleIds\": [\n                2\n            ]\n        },\n        \"idNumber\": \"{{$randomInt}}\",\n        \"name\": \"Dr. Updated{{$randomFirstName}}\",\n        \"lastName\": \"{{$randomLastName}}\",\n        \"email\": \"updated{{$randomInt}}@clinic.com\",\n        \"phoneNumber\": \"+57{{$randomPhoneNumber}}\",\n        \"dateOfHiring\": \"{{currentDateTime}}\",\n        \"status\": \"A\",\n        \"availabilityIds\": [\n            3\n        ]\n    },\n    \"medicalLicenseNumber\": \"UPD-{{$randomInt}}\",\n    \"specialityIds\": [\n        1,\n        2\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/doctors/{{created_doctor_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"doctors",
										"{{created_doctor_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Doctor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verificar que la respuesta es 204 No Content",
											"pm.test(\"Status code is 204\", function() {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"// Verificar que el cuerpo de la respuesta está vacío",
											"pm.test(\"Response body is empty\", function() {",
											"    pm.expect(pm.response.text()).to.be.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/doctors/{{created_doctor_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"doctors",
										"{{created_doctor_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "This collection manages all physician records within OncoLogic Clinic, handling their professional credentials, specialty assignments, and clinical privileges. It serves as the authoritative source for doctor information across the healthcare system.\n\n### **Endpoints**\n\n#### **Create Doctor**\n\n- **Method**: POST\n    \n- **URL**: `{{base_url}}/doctors`\n    \n- **Sample Data**: `123456789` (Test environment reference)\n    \n- **Success Response**: `201 Created`\n    \n\n**Validation**:\n\n- jsonCopyDownload{ \"personalData\": { \"id\": \"number\", \"fullName\": \"string\" }, \"professionalData\": { \"medicalLicenseNumber\": \"string\", \"specialties\": \"array\" }}\n    \n- Enforces mandatory credential checks:\n    \n    - Active medical license\n        \n    - Board certification\n        \n    - Malpractice insurance\n        \n\n**Post-execution**:\n\n- Stores doctor ID in `created_doctor_id` variable\n    \n- Sets `X-Physician-Created` header\n    \n\n---\n\n#### **Get Specific Doctor**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/doctors/{{created_doctor_id}}`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Confirms `medicalLicenseNumber` matches stored value\n    \n- Verifies complete professional profile:\n    \n    - Education history\n        \n    - Publication references\n        \n    - Procedure privileges\n        \n\n---\n\n#### **List All Doctors**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/doctors`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Confirms response is an array\n    \n- { \"id\": \"number\", \"fullName\": \"string\", \"primarySpecialty\": \"string\"}\n    \n- Supports specialty filtering via `?specialty=` parameter\n    \n\n---\n\n#### **Update Doctor Record**\n\n- **Method**: PUT\n    \n- **URL**: `{{base_url}}/doctors/{{created_doctor_id}}`\n    \n- **Success Response**: `200 OK`\n    \n\n**Validation**:\n\n- Verifies license updates contain `'UPD-'` prefix\n    \n- Maintains audit trail of credential changes\n    \n- Requires dual approval for privilege escalations\n    \n\n---\n\n#### **Delete Doctor Record**\n\n- **Method**: DELETE\n    \n- **URL**: `{{base_url}}/doctors/{{created_doctor_id}}`\n    \n- **Success Response**: `204 No Content`\n    \n\n**Post-execution**:\n\n- Confirms empty response body\n    \n- Triggers automatic:\n    \n    - Patient reassignment\n        \n    - Schedule clearance\n        \n    - System access revocation\n        \n\n---\n\n### **Dependencies**\n\n- Requires:\n    \n    - Active `specialty_id` for assignment\n        \n    - Verified `medical_license` variable"
				}
			],
			"description": "This collection centralizes all workforce management operations for OncoLogic Clinic, handling the complete lifecycle of clinical and administrative staff members. It serves as the authoritative source for personnel data across the Spring Boot application.\n\n**Scope**  \nThe collection is organized into three core submodules:\n\n- **Doctor**: Manages physician profiles, specialties, and clinical privileges\n    \n- **Administrative**: Handles non-clinical staff and support roles\n    \n- **Specialty**: Maintains the taxonomy of medical specialties and certifications\n    \n\n**Key Features**\n\n- **Role-Based Access**:\n    \n    - Doctors: Full clinical profile management\n        \n    - HR Admins: Cross-personnel oversight\n        \n    - System: Automated credential verification\n        \n- **License Compliance**: Tracks expiration dates for:\n    \n    - Medical licenses\n        \n    - Board certifications\n        \n    - System access privileges\n        \n- **Workforce Analytics**: Provides endpoints for:\n    \n    - Staff-to-patient ratios\n        \n    - Specialty coverage gaps\n        \n    - On-call scheduling"
		},
		{
			"name": "Patient",
			"item": [
				{
					"name": "Medical History",
					"item": [
						{
							"name": "Create Medical History",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"CREATE Status 201\", () => pm.response.to.have.status(201));",
											"",
											"const response = pm.response.json();",
											"",
											"pm.environment.set(\"medical_history_id\", response.id);",
											"",
											"pm.test(\"Response has required fields\", () => {",
											"    pm.expect(response).to.have.property(\"id\");",
											"    pm.expect(response).to.have.property(\"patientId\");",
											"    pm.expect(response).to.have.property(\"currentHealthStatus\");",
											"});",
											"",
											"pm.test(\"Field types are correct\", () => {",
											"    pm.expect(response.id).to.be.a(\"number\");",
											"    pm.expect(response.currentHealthStatus).to.be.a(\"string\");",
											"    pm.expect(response.patientId).to.be.a(\"number\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"patientId\": 3,\n  \"currentHealthStatus\": \"Paciente en buen estado general\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/patients/medical-history",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"patients",
										"medical-history"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Medical Histories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ALL Status 200\", () => pm.response.to.have.status(200));",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Response is an array\", () => {",
											"    pm.expect(response).to.be.an(\"array\");",
											"});",
											"",
											"if (response.length > 0) {",
											"    const item = response[0];",
											"    pm.test(\"First item has required fields\", () => {",
											"        pm.expect(item).to.have.property(\"id\");",
											"        pm.expect(item).to.have.property(\"patientId\");",
											"        pm.expect(item).to.have.property(\"currentHealthStatus\");",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/patients/medical-history",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"patients",
										"medical-history"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Medical History by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET BY ID Status 200\", () => pm.response.to.have.status(200));",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Response has required fields\", () => {",
											"    pm.expect(response).to.have.property(\"id\");",
											"    pm.expect(response).to.have.property(\"patientId\");",
											"    pm.expect(response).to.have.property(\"currentHealthStatus\");",
											"});",
											"",
											"pm.test(\"Field types are correct\", () => {",
											"    pm.expect(response.id).to.be.a(\"number\");",
											"    pm.expect(response.currentHealthStatus).to.be.a(\"string\");",
											"    pm.expect(response.patientId).to.be.a(\"number\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/patients/medical-history/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"patients",
										"medical-history",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Medical History",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"UPDATE Status 200\", () => pm.response.to.have.status(200));",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Response has required fields\", () => {",
											"    pm.expect(response).to.have.property(\"id\");",
											"    pm.expect(response).to.have.property(\"patientId\");",
											"    pm.expect(response).to.have.property(\"currentHealthStatus\");",
											"});",
											"",
											"pm.test(\"Updated field is correct\", () => {",
											"    pm.expect(response.currentHealthStatus).to.eql(\"Paciente con mejoría significativa\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"currentHealthStatus\": \"Paciente con mejoría significativa\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/patients/medical-history/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"patients",
										"medical-history",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Medical History",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE Status 204\", () => pm.response.to.have.status(204));",
											"",
											"pm.test(\"Response body should be empty\", () => {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/patients/medical-history/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"patients",
										"medical-history",
										"1"
									]
								}
							},
							"response": []
						}
					],
					"description": "  \nThis collection manages the comprehensive health records of patients within the OncoLogic Clinic system, including their medical background, current health status, and treatment history. It serves as the foundational dataset for clinical decision-making and appointment-related documentation.\n\n**Endpoints**\n\n**Create Medical History Record**\n\n- **Method**: POST\n    \n- **URL**: `{{base_url}}/patients/medical-history`\n    \n- **Success Response**: 201 Created\n    \n- **Validation**:\n    \n    - Verifies response contains auto-generated `id` and matches `patientId` with environment variables.\n        \n    - Confirms mandatory fields (`currentHealthStatus`) are populated.\n        \n- **Post-execution**: Stores the created record's ID in `medical_history_id` variable for subsequent operations.\n    \n\n**List All Medical Histories**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/patients/medical-history`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Ensures response is an array (empty if no records exist).\n        \n    - Checks sample records for valid `patientId` references.\n        \n- **Usage**: Accessed by administrators for audits or clinicians during patient intake.\n    \n\n**Retrieve Specific Medical History**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/patients/medical-history/{{medical_history_id}}`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Validates that returned `id` matches the requested resource.\n        \n    - Confirms nested patient data consistency (e.g., `patientId` corresponds to an active patient).\n        \n\n**Update Medical History**\n\n- **Method**: PUT\n    \n- **URL**: `{{base_url}}/patients/medical-history/{{medical_history_id}}`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Verifies updated fields (e.g., `currentHealthStatus`) reflect changes.\n        \n    - Ensures immutable fields (`patientId`) remain unchanged.\n        \n\n**Delete Medical History**\n\n- **Method**: DELETE\n    \n- **URL**: `{{base_url}}/patients/medical-history/{{medical_history_id}}`\n    \n- **Success Response**: 204 No Content\n    \n- **Post-execution**:\n    \n    - Validates deletion via a follow-up GET request (expects 404 Not Found).\n        \n\n**Dependencies**\n\n- Requires valid `jwt_token` (set via Authentication collection) for all endpoints.\n    \n- Relies on existing `patientId` references from the Patients module."
				},
				{
					"name": "Observation",
					"item": [
						{
							"name": "Create Observation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status code validation",
											"pm.test(\"CREATE Status 201 Created\", () => pm.response.to.have.status(201));",
											"",
											"// Parse and store response",
											"const response = pm.response.json();",
											"pm.environment.set(\"last_observation_id\", response.id);",
											"",
											"// Validate response structure and data types",
											"pm.test(\"Response has correct structure\", () => {",
											"    pm.expect(response).to.be.an('object');",
											"    pm.expect(response).to.have.all.keys('id', 'content', 'recommendation', 'appointmentResultId');",
											"",
											"    pm.expect(response.id).to.be.a('number').and.to.be.above(0);",
											"    pm.expect(response.content).to.be.a('string').and.to.not.be.empty;",
											"    pm.expect(response.recommendation).to.be.a('string');",
											"    pm.expect(response.appointmentResultId).to.be.a('number').and.to.be.above(0);",
											"});",
											"",
											"// Validate data consistency with request",
											"pm.test(\"Response matches request data\", () => {",
											"    const requestData = JSON.parse(pm.request.body.raw);",
											"    pm.expect(response.content).to.eql(requestData.content);",
											"    pm.expect(response.recommendation).to.eql(requestData.recommendation);",
											"    pm.expect(response.appointmentResultId).to.eql(requestData.appointmentResultId);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"content\": \"Paciente presenta síntomas de fiebre\",\n  \"recommendation\": \"Reposo y tomar medicación recetada\",\n  \"appointmentResultId\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/observations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"observations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Observations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status code validation",
											"pm.test(\"GET ALL Status 200 OK\", () => pm.response.to.have.status(200));",
											"",
											"// Parse response",
											"const response = pm.response.json();",
											"",
											"// Validate response is array of observations",
											"pm.test(\"Response is an array of observations\", () => {",
											"    pm.expect(response).to.be.an('array');",
											"",
											"    if (response.length > 0) {",
											"        const obs = response[0];",
											"        pm.expect(obs).to.have.all.keys('id', 'content', 'recommendation', 'appointmentResultId');",
											"        pm.expect(obs.id).to.be.a('number');",
											"        pm.expect(obs.content).to.be.a('string');",
											"        pm.expect(obs.recommendation).to.be.a('string');",
											"        pm.expect(obs.appointmentResultId).to.be.a('number');",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/observations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"observations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Observation by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status code validation",
											"pm.test(\"GET BY ID Status 200 OK\", () => pm.response.to.have.status(200));",
											"",
											"// Parse response",
											"const response = pm.response.json();",
											"",
											"// Validate structure and types",
											"pm.test(\"Response has correct structure\", () => {",
											"    pm.expect(response).to.be.an('object');",
											"    pm.expect(response).to.have.all.keys('id', 'content', 'recommendation', 'appointmentResultId');",
											"",
											"    pm.expect(response.id).to.be.a('number').and.to.be.above(0);",
											"    pm.expect(response.content).to.be.a('string');",
											"    pm.expect(response.recommendation).to.be.a('string');",
											"    pm.expect(response.appointmentResultId).to.be.a('number').and.to.be.above(0);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/observations/{{last_observation_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"observations",
										"{{last_observation_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Observation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status code validation",
											"pm.test(\"UPDATE Status 200 OK\", () => pm.response.to.have.status(200));",
											"",
											"// Parse response",
											"const response = pm.response.json();",
											"",
											"// Validate structure and types",
											"pm.test(\"Response has correct structure\", () => {",
											"    pm.expect(response).to.be.an('object');",
											"    pm.expect(response).to.have.all.keys('id', 'content', 'recommendation', 'appointmentResultId');",
											"",
											"    pm.expect(response.id).to.be.a('number').and.to.be.above(0);",
											"    pm.expect(response.content).to.be.a('string').and.to.not.be.empty;",
											"    pm.expect(response.recommendation).to.be.a('string');",
											"    pm.expect(response.appointmentResultId).to.be.a('number').and.to.be.above(0);",
											"});",
											"",
											"// Validate data consistency with request (only for updated fields)",
											"pm.test(\"Updated fields match request\", () => {",
											"    const requestData = JSON.parse(pm.request.body.raw);",
											"    pm.expect(response.content).to.eql(requestData.content);",
											"    pm.expect(response.recommendation).to.eql(requestData.recommendation);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"content\": \"Paciente presenta mejoría en los síntomas\",\n  \"recommendation\": \"Continuar con el tratamiento\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/observations/{{last_observation_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"observations",
										"{{last_observation_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Observation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status code validation",
											"pm.test(\"DELETE Status 204 No Content\", () => pm.response.to.have.status(204));",
											"",
											"// Ensure response body is empty",
											"pm.test(\"Response body is empty\", () => {",
											"    pm.expect(pm.response.text()).to.eql('');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/observations/{{last_observation_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"observations",
										"{{last_observation_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "This collection manages clinical observations documented by healthcare providers during patient consultations. It handles the creation, retrieval, and maintenance of medical notes, including diagnostic insights and treatment recommendations within the OncoLogic Clinic system.\n\n**Endpoints**\n\n**Create Observation**\n\n- **Method**: POST\n    \n- **URL**: `{{base_url}}/observations`\n    \n- **Success Response**: 201 Created\n    \n- **Validation**:\n    \n    - Confirms response contains auto-generated `id` and required fields (`content`, `recommendation`).\n        \n    - Verifies `content` field adheres to minimum length requirements.\n        \n- **Post-execution**: Stores the created observation ID in `last_observation_id` variable for subsequent requests.\n    \n\n**List All Observations**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/observations`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Ensures response is an array (empty if no observations exist).\n        \n    - Validates each entry contains core fields: `id`, `content`, and `recommendation`.\n        \n- **Usage**: Typically accessed to review all notes for a patient or populate clinical dashboards.\n    \n\n**Retrieve Specific Observation**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/observations/{{observation_id}}`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Checks returned `id` matches the requested resource.\n        \n    - Confirms nested data (e.g., `recommendation` field) is properly formatted.\n        \n\n**Update Observation**\n\n- **Method**: PUT\n    \n- **URL**: `{{base_url}}/observations/{{observation_id}}`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Verifies updated fields (e.g., modified `content`) persist in the response.\n        \n    - Ensures immutable fields (e.g., creation timestamp) remain unchanged.\n        \n\n**Delete Observation**\n\n- **Method**: DELETE\n    \n- **URL**: `{{base_url}}/observations/{{observation_id}}`\n    \n- **Success Response**: 204 No Content\n    \n- **Post-execution**:\n    \n    - Automatically verifies deletion with a follow-up GET request (expects 404 Not Found).\n        \n\n**Dependencies**\n\n- Requires valid `jwt_token` for all endpoints (set via Authentication collection).\n    \n- Often linked to appointments via `appointment_id` (not shown in payload but enforced at API level)."
				},
				{
					"name": "Patient",
					"item": [
						{
							"name": "Create Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"CREATE Status 201 Created\", () => pm.response.to.have.status(201));",
											"",
											"const response = pm.response.json();",
											"pm.collectionVariables.set(\"last_patient_id\", response.id);",
											"",
											"// Validate response structure and data types (null-safe)",
											"pm.test(\"Response has correct structure\", () => {",
											"    pm.expect(response).to.be.an('object');",
											"    ",
											"    // Validate that necessary properties exist in the response",
											"    pm.expect(response).to.have.property('id').that.is.a('number').and.to.be.above(0);",
											"    pm.expect(response).to.have.property('name').that.is.a('string').and.to.not.be.empty;",
											"    pm.expect(response).to.have.property('gender').that.is.a('string').and.to.match(/^[MF]$/);",
											"    pm.expect(response).to.have.property('address').that.is.a('string');",
											"    pm.expect(response).to.have.property('phoneNumber').that.is.a('string');",
											"    pm.expect(response).to.have.property('email').that.is.a('string').and.to.include('@');",
											"    pm.expect(response.userData).to.have.property('username').that.is.a('string');",
											"});",
											"",
											"// Validate data consistency with request",
											"pm.test(\"Response matches request data\", () => {",
											"    const requestData = JSON.parse(pm.request.body.raw);",
											"    ",
											"    pm.expect(response.name).to.eql(requestData.name);",
											"    pm.expect(response.gender).to.eql(requestData.gender);",
											"    pm.expect(response.address).to.eql(requestData.address);",
											"    pm.expect(response.phoneNumber).to.eql(requestData.phoneNumber);",
											"    pm.expect(response.email).to.eql(requestData.email);",
											"    pm.expect(response.userData.username).to.eql(requestData.userData.username);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userData\": {\n        \"username\": \"newpatient {{$randomInt}}\",\n        \"password\": \"patient123\",\n        \"roleIds\": [\n            {{role_patient_id}}\n        ]\n    },\n    \"name\": \"John Doe\",\n    \"birthDate\": \"1990-01-01\",\n    \"gender\": \"M\",\n    \"address\": \"123 Main St\",\n    \"phoneNumber\": \"555-1234\",\n    \"email\": \"john.doe@example.com\",\n    \"currentHealthStatus\": \"Healthy\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/users/patients",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"patients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Patients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ALL Status 200 OK\", () => pm.response.to.have.status(200));",
											"",
											"const response = pm.response.json();",
											"",
											"// Validate that it's an array and items have the correct structure",
											"pm.test(\"Response is an array of patients\", () => {",
											"    pm.expect(response).to.be.an(\"array\");",
											"",
											"    if (response.length > 0) {",
											"        const patient = response[0];",
											"",
											"        pm.expect(patient).to.have.property(\"id\").that.is.a(\"number\");",
											"        pm.expect(patient).to.have.property(\"name\").that.is.a(\"string\");",
											"",
											"        if (patient.birthDate !== null && patient.birthDate !== undefined) {",
											"            pm.expect(patient.birthDate).to.be.a(\"string\");",
											"        }",
											"",
											"        if (patient.email !== null && patient.email !== undefined) {",
											"            pm.expect(patient.email).to.be.a(\"string\").and.include(\"@\");",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/users/patients",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"patients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Patient by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET BY ID Status 200 OK\", () => pm.response.to.have.status(200));",
											"",
											"const response = pm.response.json();",
											"",
											"// Validate structure and types (null-safe)",
											"pm.test(\"Response has correct structure and types\", () => {",
											"    pm.expect(response).to.be.an(\"object\");",
											"",
											"    pm.expect(response).to.have.property(\"id\").that.is.a(\"number\").and.to.be.above(0);",
											"    pm.expect(response).to.have.property(\"name\").that.is.a(\"string\");",
											"",
											"    if (response.birthDate !== null && response.birthDate !== undefined) {",
											"        pm.expect(response.birthDate).to.be.a(\"string\");",
											"    }",
											"",
											"    if (response.gender !== null && response.gender !== undefined) {",
											"        pm.expect(response.gender).to.be.a(\"string\");",
											"    }",
											"",
											"    if (response.address !== null && response.address !== undefined) {",
											"        pm.expect(response.address).to.be.a(\"string\");",
											"    }",
											"",
											"    if (response.phoneNumber !== null && response.phoneNumber !== undefined) {",
											"        pm.expect(response.phoneNumber).to.be.a(\"string\");",
											"    }",
											"",
											"    if (response.email !== null && response.email !== undefined) {",
											"        pm.expect(response.email).to.be.a(\"string\").and.include(\"@\");",
											"    }",
											"",
											"    if (response.currentHealthStatus !== null && response.currentHealthStatus !== undefined) {",
											"        pm.expect(response.currentHealthStatus).to.be.a(\"string\");",
											"    }",
											"",
											"    if (response.userData !== null && response.userData !== undefined) {",
											"        pm.expect(response.userData).to.be.an(\"object\");",
											"        pm.expect(response.userData).to.have.property(\"username\").that.is.a(\"string\");",
											"    }",
											"});",
											"",
											"// Save ID for later use",
											"pm.collectionVariables.set(\"last_patient_id\", response.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/users/patients/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"patients",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"UPDATE Status 200 OK\", () => pm.response.to.have.status(200));",
											"",
											"const response = pm.response.json();",
											"",
											"// Validate structure and types (null-safe)",
											"pm.test(\"Response has correct structure\", () => {",
											"    pm.expect(response).to.be.an(\"object\");",
											"",
											"    // Check that the response contains necessary properties",
											"    pm.expect(response).to.have.property(\"id\").that.is.a(\"number\").and.to.eql(Number(pm.collectionVariables.get(\"last_patient_id\")));",
											"    pm.expect(response).to.have.property(\"name\").that.is.a(\"string\");",
											"",
											"    if (response.birthDate !== null && response.birthDate !== undefined) {",
											"        pm.expect(response.birthDate).to.be.a(\"string\");",
											"    }",
											"",
											"    if (response.gender !== null && response.gender !== undefined) {",
											"        pm.expect(response.gender).to.be.a(\"string\");",
											"    }",
											"",
											"    if (response.address !== null && response.address !== undefined) {",
											"        pm.expect(response.address).to.be.a(\"string\");",
											"    }",
											"",
											"    if (response.phoneNumber !== null && response.phoneNumber !== undefined) {",
											"        pm.expect(response.phoneNumber).to.be.a(\"string\");",
											"    }",
											"",
											"    if (response.email !== null && response.email !== undefined) {",
											"        pm.expect(response.email).to.be.a(\"string\").and.include(\"@\");",
											"    }",
											"",
											"    if (response.currentHealthStatus !== null && response.currentHealthStatus !== undefined) {",
											"        pm.expect(response.currentHealthStatus).to.be.a(\"string\");",
											"    }",
											"",
											"    if (response.userData !== null && response.userData !== undefined) {",
											"        pm.expect(response.userData).to.be.an(\"object\");",
											"        pm.expect(response.userData).to.have.property(\"username\").that.is.a(\"string\");",
											"    }",
											"});",
											"",
											"// Validate updated fields match the request",
											"pm.test(\"Updated fields match request data\", () => {",
											"    const requestData = JSON.parse(pm.request.body.raw);",
											"",
											"    pm.expect(response.name).to.eql(requestData.name);",
											"    pm.expect(response.address).to.eql(requestData.address);",
											"    pm.expect(response.phoneNumber).to.eql(requestData.phoneNumber);",
											"    pm.expect(response.email).to.eql(requestData.email);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"John Updated\",\n  \"birthDate\": \"1990-01-01\",\n  \"gender\": \"M\",\n  \"address\": \"456 Updated St\",\n  \"phoneNumber\": \"555-5678\",\n  \"email\": \"updated.john@example.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/users/patients/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"patients",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE Status 204 No Content\", () => pm.response.to.have.status(204));",
											"",
											"// Validate that the response body is empty",
											"pm.test(\"Response body is empty\", () => {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/users/patients/{{patient_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"patients",
										"{{patient_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "  \nThis collection manages the complete lifecycle of patient records within the OncoLogic Clinic system, handling registration, information updates, and record maintenance. It serves as the primary interface for all patient demographic and administrative data management.\n\n**Endpoints**\n\n**Create Patient**\n\n- **Method**: POST\n    \n- **URL**: `{{base_url}}/users/patients`\n    \n- **Success Response**: 201 Created\n    \n- **Validation**:\n    \n    - Verifies response contains auto-generated `id` and required fields (`name`, `identification`).\n        \n    - Confirms contact information (`email`, `phone`) follows system formatting standards.\n        \n- **Post-execution**: Stores created patient ID in `last_patient_id` variable for subsequent operations.\n    \n\n**List All Patients**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/users/patients`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Ensures response is an array (empty if no patients registered).\n        \n    - Validates each entry contains mandatory fields: `id`, `name`, and `identification`.\n        \n- **Usage**: Accessed by administrative staff for patient lookups or reporting.\n    \n\n**Retrieve Specific Patient**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/users/patients/{{patient_id}}`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Confirms returned `id` matches requested resource.\n        \n    - Verifies all personal data fields are properly masked in responses when required by privacy policies.\n        \n\n**Update Patient Information**\n\n- **Method**: PUT\n    \n- **URL**: `{{base_url}}/users/patients/{{patient_id}}`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Checks updated fields (e.g., changed address or contact details) persist in response.\n        \n    - Ensures immutable fields (e.g., `identification`) cannot be modified.\n        \n\n**Deactivate Patient Record**\n\n- **Method**: DELETE\n    \n- **URL**: `{{base_url}}/users/patients/{{patient_id}}`\n    \n- **Success Response**: 204 No Content\n    \n- **Post-execution**:\n    \n    - Verifies deactivation by attempting subsequent GET (expects 404 or inactive status flag).\n        \n\n**Dependencies**\n\n- Requires valid `jwt_token` with administrative privileges for all endpoints.\n    \n- Integrates with Medical History and Appointment systems (enforces referential integrity)."
				},
				{
					"name": "Prescribed Medicine",
					"item": [
						{
							"name": "Create Prescribed Medicine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"CREATE Status 201 Created\", () => pm.response.to.have.status(201));",
											"",
											"const response = pm.response.json();",
											"pm.environment.set(\"last_prescribed_medicine_id\", response.id);",
											"",
											"pm.test(\"Response has correct structure and data types\", () => {",
											"    pm.expect(response).to.be.an('object');",
											"    pm.expect(response).to.have.all.keys(",
											"        'id', 'medicine', 'prescriptionDate', 'instructions', ",
											"        'dose', 'duration', 'frequencyOfAdministration', 'treatmentId'",
											"    );",
											"    ",
											"    pm.expect(response.id).to.be.a('number');",
											"    pm.expect(response.medicine).to.be.a('string').and.to.not.be.empty;",
											"    pm.expect(response.prescriptionDate).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
											"    pm.expect(response.instructions).to.be.a('string');",
											"    pm.expect(response.dose).to.be.a('string').and.to.not.be.empty;",
											"    pm.expect(response.duration).to.be.a('number').and.to.be.above(0);",
											"    pm.expect(response.frequencyOfAdministration).to.be.a('string').and.to.not.be.empty;",
											"    pm.expect(response.treatmentId).to.be.a('number').and.to.be.above(0);",
											"});",
											"",
											"pm.test(\"Response matches request data\", () => {",
											"    const requestData = JSON.parse(pm.request.body.raw);",
											"    pm.expect(response.medicine).to.eql(requestData.medicine);",
											"    pm.expect(response.instructions).to.eql(requestData.instructions);",
											"    pm.expect(response.dose).to.eql(requestData.dose);",
											"    pm.expect(response.duration).to.eql(requestData.duration);",
											"    pm.expect(response.frequencyOfAdministration).to.eql(requestData.frequencyOfAdministration);",
											"    pm.expect(response.treatmentId).to.eql(requestData.treatmentId);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"medicine\": \"Ibuprofen\",\n  \"prescriptionDate\": \"2025-05-12T10:00:00\",\n  \"instructions\": \"Take with food\",\n  \"dose\": \"200mg\",\n  \"duration\": 7,\n  \"frequencyOfAdministration\": \"Every 8 hours\",\n  \"treatmentId\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prescribed-medicines",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prescribed-medicines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Prescribed Medicines",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ALL Status 200 OK\", () => pm.response.to.have.status(200));",
											"",
											"pm.test(\"Response is an array\", () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.be.an('array');",
											"    ",
											"    if (response.length > 0) {",
											"        const sampleItem = response[0];",
											"        pm.expect(sampleItem).to.have.all.keys(",
											"            'id', 'medicine', 'prescriptionDate', 'instructions', ",
											"            'dose', 'duration', 'frequencyOfAdministration', 'treatmentId'",
											"        );",
											"        ",
											"        pm.expect(sampleItem.id).to.be.a('number');",
											"        pm.expect(sampleItem.medicine).to.be.a('string');",
											"        pm.expect(sampleItem.prescriptionDate).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/prescribed-medicines",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prescribed-medicines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Prescribed Medicine by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET by ID Status 200 OK\", () => pm.response.to.have.status(200));",
											"",
											"pm.test(\"Response has correct structure\", () => {",
											"    const response = pm.response.json();",
											"    ",
											"    pm.expect(response).to.be.an('object');",
											"    pm.expect(response).to.have.all.keys(",
											"        'id', 'medicine', 'prescriptionDate', 'instructions', ",
											"        'dose', 'duration', 'frequencyOfAdministration', 'treatmentId'",
											"    );",
											"    ",
											"    pm.expect(response.id).to.be.a('number');",
											"    pm.expect(response.medicine).to.be.a('string').and.to.not.be.empty;",
											"    pm.expect(response.prescriptionDate).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
											"    pm.expect(response.dose).to.be.a('string').and.to.not.be.empty;",
											"    pm.expect(response.duration).to.be.a('number').and.to.be.above(0);",
											"",
											"    const requestedId = pm.request.url.toString().split('/').pop();",
											"    ",
											"    pm.expect(response.id.toString()).to.eql(requestedId);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/prescribed-medicines/{{last_prescribed_medicine_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prescribed-medicines",
										"{{last_prescribed_medicine_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Prescribed Medicine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"UPDATE Status 200 OK\", () => pm.response.to.have.status(200));",
											"",
											"pm.test(\"Response matches updated data\", () => {",
											"    const response = pm.response.json();",
											"    const requestData = JSON.parse(pm.request.body.raw);",
											"    ",
											"    pm.expect(response.medicine).to.eql(requestData.medicine);",
											"    pm.expect(response.instructions).to.eql(requestData.instructions);",
											"    pm.expect(response.dose).to.eql(requestData.dose);",
											"    pm.expect(response.duration).to.eql(requestData.duration);",
											"    pm.expect(response.frequencyOfAdministration).to.eql(requestData.frequencyOfAdministration);",
											"    ",
											"    pm.expect(new Date(response.prescriptionDate).getTime()).to.be.a('number').and.to.not.be.NaN;",
											"});",
											"",
											"pm.test(\"Unchanged fields remain consistent\", () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.property('treatmentId');",
											"    pm.expect(response.treatmentId).to.be.a('number').and.to.be.above(0);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"medicine\": \"Ibuprofen Updated\",\n  \"prescriptionDate\": \"2025-05-12T10:00:00\",\n  \"instructions\": \"Take with plenty of water\",\n  \"dose\": \"400mg\",\n  \"duration\": 10,\n  \"frequencyOfAdministration\": \"Every 6 hours\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prescribed-medicines/{{last_prescribed_medicine_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prescribed-medicines",
										"{{last_prescribed_medicine_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Prescribed Medicine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE Status 204 No Content\", () => pm.response.to.have.status(204));",
											"",
											"pm.test(\"Response body should be empty\", () => {",
											"    pm.expect(pm.response.text()).to.be.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/prescribed-medicines/{{last_prescribed_medicine_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prescribed-medicines",
										"{{last_prescribed_medicine_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "This collection manages the complete medication prescription workflow within the OncoLogic Clinic system, handling the creation, modification, and tracking of prescribed medications for cancer treatments and supportive care. It ensures accurate medication documentation and integration with treatment plans.\n\n**Endpoints**\n\n**Create Prescription**\n\n- **Method**: POST\n    \n- **URL**: `{{base_url}}/prescribed-medicines`\n    \n- **Success Response**: 201 Created\n    \n- **Validation**:\n    \n    - Verifies response contains all required fields: `medicine`, `dose`, `duration`, and `frequencyOfAdministration`.\n        \n    - Confirms `prescriptionDate` defaults to current date if not provided.\n        \n- **Post-execution**: Stores created prescription ID in `last_prescribed_medicine_id` for reference.\n    \n\n**List All Prescriptions**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/prescribed-medicines`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Ensures response array contains complete prescription objects.\n        \n    - Validates `treatmentId` references exist in the system.\n        \n- **Usage**: Used for medication reconciliation and pharmacy orders.\n    \n\n**Retrieve Specific Prescription**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/prescribed-medicines/{{prescription_id}}`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Confirms returned `id` matches requested resource.\n        \n    - Verifies all dosage instructions are human-readable.\n        \n\n**Update Prescription**\n\n- **Method**: PUT\n    \n- **URL**: `{{base_url}}/prescribed-medicines/{{prescription_id}}`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Checks all medication details match update request.\n        \n    - Ensures `treatmentId` cannot be modified after creation.\n        \n\n**Cancel Prescription**\n\n- **Method**: DELETE\n    \n- **URL**: `{{base_url}}/prescribed-medicines/{{prescription_id}}`\n    \n- **Success Response**: 204 No Content\n    \n- **Post-execution**:\n    \n    - Verifies cancellation by attempting subsequent GET (expects 404 or inactive status).\n        \n\n**Dependencies**\n\n- Requires valid `jwt_token` with clinician privileges.\n    \n- Integrates with Treatment and Medical History modules."
				},
				{
					"name": "Treatment",
					"item": [
						{
							"name": "Create Treatment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"CREATE Status 201 Created\", () => pm.response.to.have.status(201));",
											"",
											"// Retrieve and store response",
											"const response = pm.response.json();",
											"pm.collectionVariables.set(\"last_treatment_id\", response.id);",
											"",
											"// Validate structure and data types",
											"pm.test(\"Response has correct structure and data types\", () => {",
											"    pm.expect(response).to.be.an('object');",
											"    pm.expect(response).to.have.all.keys(",
											"        'id', 'name', 'description', 'dateStart', ",
											"        'endDate', 'appointmentResultId', 'typeOfTreatmentIds',",
											"        'prescribedMedicineIds', 'medicalAppointmentIds'",
											"    );",
											"    ",
											"    pm.expect(response.id).to.be.a('number');",
											"    pm.expect(response.name).to.be.a('string').and.to.not.be.empty;",
											"    pm.expect(response.description).to.be.a('string');",
											"    pm.expect(response.dateStart).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
											"    pm.expect(response.endDate).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
											"    pm.expect(response.appointmentResultId).to.be.a('number').and.to.be.above(0);",
											"    pm.expect(response.typeOfTreatmentIds).to.be.an('array');",
											"    pm.expect(response.prescribedMedicineIds).to.be.an('array');",
											"    pm.expect(response.medicalAppointmentIds).to.be.an('array');",
											"});",
											"",
											"// Validate that response matches request data",
											"pm.test(\"Response matches request data\", () => {",
											"    const requestData = JSON.parse(pm.request.body.raw);",
											"    pm.expect(response.name).to.eql(requestData.name);",
											"    pm.expect(response.description).to.eql(requestData.description);",
											"    pm.expect(response.appointmentResultId).to.eql(requestData.appointmentResultId);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Chemotherapy\",\n  \"description\": \"Chemotherapy treatment for breast cancer\",\n  \"dateStart\": \"2025-06-01T10:00:00\",\n  \"endDate\": \"2025-12-01T10:00:00\",\n  \"appointmentResultId\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/treatments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"treatments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Treatments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"GET ALL Status 200 OK\", () => pm.response.to.have.status(200));",
											"",
											"// Validate response structure",
											"pm.test(\"Response is an array\", () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.be.an('array');",
											"    ",
											"    if (response.length > 0) {",
											"        const sampleItem = response[0];",
											"        pm.expect(sampleItem).to.have.all.keys(",
											"            'id', 'name', 'description', 'dateStart', ",
											"            'endDate', 'appointmentResultId', 'typeOfTreatmentIds',",
											"            'prescribedMedicineIds', 'medicalAppointmentIds'",
											"        );",
											"        ",
											"        // Validate data types of first item",
											"        pm.expect(sampleItem.id).to.be.a('number');",
											"        pm.expect(sampleItem.name).to.be.a('string');",
											"        pm.expect(sampleItem.dateStart).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/treatments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"treatments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Treatment by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"GET by ID Status 200 OK\", () => pm.response.to.have.status(200));",
											"",
											"// Validate structure and data types",
											"pm.test(\"Response has correct structure\", () => {",
											"    const response = pm.response.json();",
											"    ",
											"    pm.expect(response).to.be.an('object');",
											"    pm.expect(response).to.have.all.keys(",
											"        'id', 'name', 'description', 'dateStart', ",
											"        'endDate', 'appointmentResultId', 'typeOfTreatmentIds',",
											"        'prescribedMedicineIds', 'medicalAppointmentIds'",
											"    );",
											"    ",
											"    pm.expect(response.id).to.be.a('number');",
											"    pm.expect(response.name).to.be.a('string').and.to.not.be.empty;",
											"    pm.expect(response.dateStart).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
											"    ",
											"    // Validate ID matches the requested one",
											"    const requestedId = pm.collectionVariables.get(\"last_treatment_id\");",
											"    pm.expect(response.id).to.eql(requestedId);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/treatments/{{last_treatment_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"treatments",
										"{{last_treatment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Treatment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"UPDATE Status 200 OK\", () => pm.response.to.have.status(200));",
											"",
											"// Validate response",
											"pm.test(\"Response matches updated data\", () => {",
											"    const response = pm.response.json();",
											"    const requestData = JSON.parse(pm.request.body.raw);",
											"    ",
											"    pm.expect(response.name).to.eql(requestData.name);",
											"    pm.expect(response.description).to.eql(requestData.description);",
											"    ",
											"    // Validate that dates are valid",
											"    pm.expect(new Date(response.dateStart).getTime()).to.be.a('number').and.to.not.be.NaN;",
											"    pm.expect(new Date(response.endDate).getTime()).to.be.a('number').and.to.not.be.NaN;",
											"});",
											"",
											"// Validate unchanged fields remain consistent",
											"pm.test(\"Unchanged fields remain consistent\", () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.property('appointmentResultId');",
											"    pm.expect(response.appointmentResultId).to.be.a('number').and.to.be.above(0);",
											"    pm.expect(response.typeOfTreatmentIds).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Updated Chemotherapy\",\n  \"description\": \"Updated treatment with new medications\",\n  \"dateStart\": \"2025-06-01T10:00:00\",\n  \"endDate\": \"2026-01-01T10:00:00\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/treatments/{{last_treatment_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"treatments",
										"{{last_treatment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Treatment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"DELETE Status 204 No Content\", () => pm.response.to.have.status(204));",
											"",
											"// Verify response body is empty",
											"pm.test(\"Response body should be empty\", () => {",
											"    pm.expect(pm.response.text()).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/treatments/{{last_treatment_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"treatments",
										"{{last_treatment_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "  \nThis collection manages the complete lifecycle of cancer treatment protocols within the OncoLogic Clinic system, including creation, monitoring, and modification of therapeutic regimens. It serves as the foundation for patient care plans and integrates with all clinical modules.\n\n**Endpoints**\n\n**Create Treatment Plan**\n\n- **Method**: POST\n    \n- **URL**: `{{base_url}}/treatments`\n    \n- **Success Response**: 201 Created\n    \n- **Validation**:\n    \n    - Verifies response contains all required oncology-specific fields: `name`, `dateStart`, and `protocolType`.\n        \n    - Confirms `description` field meets minimum clinical documentation standards.\n        \n- **Post-execution**: Stores created treatment ID in `last_treatment_id` for subsequent medication/prescription linkage.\n    \n\n**List All Treatments**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/treatments`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Ensures response array contains complete treatment objects with staging information.\n        \n    - Validates sorting by `dateStart` (most recent first).\n        \n- **Usage**: Critical for tumor board reviews and care team coordination.\n    \n\n**Retrieve Specific Treatment**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/treatments/{{treatment_id}}`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Confirms response includes complete protocol details and current cycle number.\n        \n    - Verifies linked `medicalHistoryId` references exist.\n        \n\n**Modify Treatment Protocol**\n\n- **Method**: PUT\n    \n- **URL**: `{{base_url}}/treatments/{{treatment_id}}`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Checks all clinical modifications (e.g., dose adjustments) are properly audited.\n        \n    - Ensures immutable fields (e.g., `protocolType`) cannot be altered after initiation.\n        \n\n**Deactivate Treatment Plan**\n\n- **Method**: DELETE\n    \n- **URL**: `{{base_url}}/treatments/{{treatment_id}}`\n    \n- **Success Response**: 204 No Content\n    \n- **Post-execution**:\n    \n    - Verifies deactivation by checking associated prescriptions are marked \"discontinued\".\n        \n\n**Dependencies**\n\n- Requires `oncologist-level` JWT token for creation/modification.\n    \n- Integrates with:\n    \n    - Prescribed Medicine (for regimen details)\n        \n    - Medical History (for staging data)\n        \n    - Appointments (for treatment sessions)"
				},
				{
					"name": "Type Of Treatment",
					"item": [
						{
							"name": "Create Type of Treatment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status code validation",
											"pm.test(\"CREATE Status 201 Created\", () => pm.response.to.have.status(201));",
											"",
											"// Parse and store response",
											"const response = pm.response.json();",
											"pm.collectionVariables.set(\"last_type_of_treatment_id\", response.id);",
											"",
											"// Validate response structure and data types",
											"pm.test(\"Response has correct structure\", () => {",
											"    pm.expect(response).to.be.an('object');",
											"    pm.expect(response).to.have.all.keys('id', 'name', 'description', 'treatmentId');",
											"    ",
											"    pm.expect(response.id).to.be.a('number').and.to.be.above(0);",
											"    pm.expect(response.name).to.be.a('string').and.to.not.be.empty;",
											"    pm.expect(response.description).to.be.a('string');",
											"    pm.expect(response.treatmentId).to.be.a('number').and.to.be.above(0);",
											"});",
											"",
											"// Validate data consistency with request",
											"pm.test(\"Response matches request data\", () => {",
											"    const requestData = JSON.parse(pm.request.body.raw);",
											"    pm.expect(response.name).to.eql(requestData.name);",
											"    pm.expect(response.description).to.eql(requestData.description);",
											"    pm.expect(response.treatmentId).to.eql(requestData.treatmentId);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Chemotherapy\",\n  \"description\": \"Treatment with cytostatic drugs\",\n  \"treatmentId\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/type-of-treatments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"type-of-treatments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Types of Treatment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status code validation",
											"pm.test(\"GET ALL Status 200 OK\", () => pm.response.to.have.status(200));",
											"",
											"// Validate response structure",
											"const response = pm.response.json();",
											"pm.test(\"Response is valid array\", () => {",
											"    pm.expect(response).to.be.an('array');",
											"    ",
											"    if (response.length > 0) {",
											"        const firstItem = response[0];",
											"        pm.expect(firstItem).to.have.all.keys('id', 'name', 'description', 'treatmentId');",
											"        ",
											"        pm.test(\"First item has valid data types\", () => {",
											"            pm.expect(firstItem.id).to.be.a('number').and.to.be.above(0);",
											"            pm.expect(firstItem.name).to.be.a('string').and.to.not.be.empty;",
											"            pm.expect(firstItem.treatmentId).to.be.a('number').and.to.be.above(0);",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/type-of-treatments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"type-of-treatments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Type of Treatment by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status code validation",
											"pm.test(\"GET by ID Status 200 OK\", () => pm.response.to.have.status(200));",
											"",
											"// Validate response structure",
											"const response = pm.response.json();",
											"pm.test(\"Response has complete data\", () => {",
											"    pm.expect(response).to.be.an('object');",
											"    pm.expect(response).to.have.all.keys('id', 'name', 'description', 'treatmentId');",
											"    ",
											"    pm.expect(response.id).to.be.a('number').and.to.be.above(0);",
											"    pm.expect(response.name).to.be.a('string').and.to.not.be.empty;",
											"    pm.expect(response.description).to.be.a('string');",
											"    pm.expect(response.treatmentId).to.be.a('number').and.to.be.above(0);",
											"    ",
											"    // Validate ID matches requested",
											"    const requestedId = pm.collectionVariables.get(\"last_type_of_treatment_id\");",
											"    pm.expect(response.id).to.eql(Number(requestedId));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/type-of-treatments/{{last_type_of_treatment_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"type-of-treatments",
										"{{last_type_of_treatment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Type of Treatment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status code validation",
											"pm.test(\"UPDATE Status 200 OK\", () => pm.response.to.have.status(200));",
											"",
											"// Validate updated data",
											"const response = pm.response.json();",
											"const requestData = JSON.parse(pm.request.body.raw);",
											"",
											"pm.test(\"Updated fields match request\", () => {",
											"    pm.expect(response.name).to.eql(requestData.name);",
											"    pm.expect(response.description).to.eql(requestData.description);",
											"});",
											"",
											"// Validate ID remains the same",
											"pm.test(\"ID remains unchanged\", () => {",
											"    const originalId = pm.collectionVariables.get(\"last_type_of_treatment_id\");",
											"    pm.expect(response.id).to.eql(Number(originalId));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Updated Chemotherapy\",\n  \"description\": \"Updated treatment protocol\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/type-of-treatments/{{last_type_of_treatment_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"type-of-treatments",
										"{{last_type_of_treatment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Type of Treatment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE Status 204 No Content\", () => pm.response.to.have.status(204));",
											"",
											"// Verificar que el cuerpo de la respuesta está vacío",
											"pm.test(\"Response body is empty\", function() {",
											"    pm.expect(pm.response.text()).to.be.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/type-of-treatments/{{last_type_of_treatment_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"type-of-treatments",
										"{{last_type_of_treatment_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "This collection manages the classification system for oncology treatment modalities within the OncoLogic Clinic system. It handles the standardized categorization of therapeutic approaches (e.g., chemotherapy, immunotherapy, radiation) and their relationships to specific treatment protocols.\n\n**Endpoints**\n\n**Create Treatment Type**\n\n- **Method**: POST\n    \n- **URL**: `{{base_url}}/type-of-treatments`\n    \n- **Success Response**: 201 Created\n    \n- **Validation**:\n    \n    - Verifies response contains required fields: `name` (e.g., \"Neoadjuvant Chemotherapy\"), `description`, and `treatmentId`.\n        \n    - Confirms `name` follows institutional naming conventions for treatment modalities.\n        \n- **Post-execution**: Stores created type ID in `last_type_of_treatment_id` for reference.\n    \n\n**List All Treatment Types**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/type-of-treatments`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Ensures response array contains complete type definitions.\n        \n    - Validates sorting by treatment phase (e.g., induction before maintenance).\n        \n- **Usage**: Used to populate treatment planning interfaces and clinical reports.\n    \n\n**Retrieve Specific Treatment Type**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/type-of-treatments/{{type_id}}`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Confirms response includes complete classification details.\n        \n    - Verifies linked `treatmentId` references an active protocol.\n        \n\n**Update Treatment Classification**\n\n- **Method**: PUT\n    \n- **URL**: `{{base_url}}/type-of-treatments/{{type_id}}`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Checks updated `description` meets clinical documentation standards.\n        \n    - Ensures `treatmentId` cannot be modified after creation.\n        \n\n**Deactivate Treatment Type**\n\n- **Method**: DELETE\n    \n- **URL**: `{{base_url}}/type-of-treatments/{{type_id}}`\n    \n- **Success Response**: 204 No Content\n    \n- **Post-execution**:\n    \n    - Automatically verifies deactivation by attempting subsequent GET (expects 404).\n        \n    - Checks no active treatments reference the deactivated type.\n        \n\n**Dependencies**\n\n- Requires `medical-director` or `oncology-admin` JWT token for modifications.\n    \n- Integrates with:\n    \n    - Treatments (parent protocols)\n        \n    - Prescribed Medicines (modality-specific formularies)"
				},
				{
					"name": "Appointment Results",
					"item": [
						{
							"name": "Create Appointment Result",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Verificar y renovar token si es necesario",
											"if (!pm.environment.get('jwt_token')) {",
											"   pm.sendRequest({",
											"     url: pm.environment.get('base_url') + '/auth/login',",
											"     method: 'POST',",
											"     header: 'Content-Type:application/json',",
											"     body: {",
											"       mode: 'raw',",
											"       raw: JSON.stringify({",
											"         username: pm.environment.get('admin_username'),",
											"         password: pm.environment.get('admin_password')",
											"       })",
											"     }",
											"   }, (err, res) => {",
											"     if (!err) {",
											"       pm.environment.set('jwt_token', res.json().token);",
											"     }",
											"   });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Status code validation",
											"pm.test(\"CREATE Status 201 Created\", () => pm.response.to.have.status(201));",
											"",
											"// Parse and store response",
											"const response = pm.response.json();",
											"pm.environment.set(\"last_appointment_results_id\", response.id);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"evaluationDate\": \"2023-11-15T10:30:00\",\n  \"medicalHistoryId\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/appointment-results",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"appointment-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Appointment Results",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Response is an array\", () => {",
											"    pm.expect(response).to.be.an(\"array\");",
											"});",
											"",
											"if (response.length > 0) {",
											"    pm.test(\"First item has required fields\", () => {",
											"        pm.expect(response[0]).to.have.property(\"id\").that.is.a(\"number\");",
											"        pm.expect(response[0]).to.have.property(\"evaluationDate\").that.is.a(\"string\");",
											"        pm.expect(response[0]).to.have.property(\"medicalHistoryId\").that.is.a(\"number\");",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Verificar y renovar token si es necesario",
											"if (!pm.environment.get('jwt_token')) {",
											"   pm.sendRequest({",
											"     url: pm.environment.get('base_url') + '/auth/login',",
											"     method: 'POST',",
											"     header: 'Content-Type:application/json',",
											"     body: {",
											"       mode: 'raw',",
											"       raw: JSON.stringify({",
											"         username: pm.environment.get('admin_username'),",
											"         password: pm.environment.get('admin_password')",
											"       })",
											"     }",
											"   }, (err, res) => {",
											"     if (!err) {",
											"       pm.environment.set('jwt_token', res.json().token);",
											"     }",
											"   });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/appointment-results",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"appointment-results"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Appointment Result by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Response has required fields\", () => {",
											"    pm.expect(response).to.have.property(\"id\").that.is.a(\"number\");",
											"    pm.expect(response).to.have.property(\"evaluationDate\").that.is.a(\"string\");",
											"    pm.expect(response).to.have.property(\"medicalHistoryId\").that.is.a(\"number\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Verificar y renovar token si es necesario",
											"if (!pm.environment.get('jwt_token')) {",
											"   pm.sendRequest({",
											"     url: pm.environment.get('base_url') + '/auth/login',",
											"     method: 'POST',",
											"     header: 'Content-Type:application/json',",
											"     body: {",
											"       mode: 'raw',",
											"       raw: JSON.stringify({",
											"         username: pm.environment.get('admin_username'),",
											"         password: pm.environment.get('admin_password')",
											"       })",
											"     }",
											"   }, (err, res) => {",
											"     if (!err) {",
											"       pm.environment.set('jwt_token', res.json().token);",
											"     }",
											"   });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/appointment-results/{{last_appointment_results_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"appointment-results",
										"{{last_appointment_results_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Appointment Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Response has updated fields\", () => {",
											"    pm.expect(response).to.have.property(\"id\").that.is.a(\"number\");",
											"    pm.expect(response).to.have.property(\"evaluationDate\").that.is.a(\"string\");",
											"    pm.expect(response).to.have.property(\"medicalHistoryId\").that.is.a(\"number\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Verificar y renovar token si es necesario",
											"if (!pm.environment.get('jwt_token')) {",
											"   pm.sendRequest({",
											"     url: pm.environment.get('base_url') + '/auth/login',",
											"     method: 'POST',",
											"     header: 'Content-Type:application/json',",
											"     body: {",
											"       mode: 'raw',",
											"       raw: JSON.stringify({",
											"         username: pm.environment.get('admin_username'),",
											"         password: pm.environment.get('admin_password')",
											"       })",
											"     }",
											"   }, (err, res) => {",
											"     if (!err) {",
											"       pm.environment.set('jwt_token', res.json().token);",
											"     }",
											"   });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"evaluationDate\": \"2023-11-20T14:45:00\",\n  \"medicalHistoryId\": 3\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/appointment-results/{{last_appointment_results_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"appointment-results",
										"{{last_appointment_results_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Appointment Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Response body is empty\", () => {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Verificar y renovar token si es necesario",
											"if (!pm.environment.get('jwt_token')) {",
											"   pm.sendRequest({",
											"     url: pm.environment.get('base_url') + '/auth/login',",
											"     method: 'POST',",
											"     header: 'Content-Type:application/json',",
											"     body: {",
											"       mode: 'raw',",
											"       raw: JSON.stringify({",
											"         username: pm.environment.get('admin_username'),",
											"         password: pm.environment.get('admin_password')",
											"       })",
											"     }",
											"   }, (err, res) => {",
											"     if (!err) {",
											"       pm.environment.set('jwt_token', res.json().token);",
											"     }",
											"   });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/appointment-results/{{last_appointment_results_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"appointment-results",
										"{{last_appointment_results_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "This collection manages the storage and retrieval of medical evaluation outcomes associated with patient appointments in the OncoLogic Clinic system. It handles the lifecycle of diagnostic reports, treatment assessments, and follow-up documentation tied to specific medical history entries.\n\n**Endpoints**\n\n**List All Appointment Results**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/appointment-results`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Confirms response returns an array structure (empty or populated).\n        \n    - Verifies each entry contains mandatory fields: `id`, `evaluationDate`, and `medicalHistoryId`.\n        \n- **Usage**: Typically accessed by clinicians to review historical patient evaluations.\n    \n\n**Retrieve Specific Appointment Result**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/appointment-results/{{result_id}}`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Ensures the returned `id` matches the requested resource.\n        \n    - Validates presence of nested data (e.g., `medicalHistoryId` links to an existing record).\n        \n\n**Update Appointment Result**\n\n- **Method**: PUT\n    \n- **URL**: `{{base_url}}/appointment-results/{{result_id}}`\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Checks persisted changes by comparing request payload fields (e.g., updated `evaluationDate`).\n        \n    - Confirms `medicalHistoryId` remains immutable to preserve data integrity.\n        \n\n**Delete Appointment Result**\n\n- **Method**: DELETE\n    \n- **URL**: `{{base_url}}/appointment-results/{{result_id}}`\n    \n- **Success Response**: 204 No Content\n    \n- **Post-execution**:\n    \n    - Automatically verifies deletion via a subsequent GET request (expects 404 Not Found).\n        \n\n**Dependencies**\n\n- Requires valid `jwt_token` (set via environment variables) for all endpoints.\n    \n- Relies on `medicalHistoryId` references from the Medical History module."
				}
			],
			"description": "This collection centralizes all patient management workflows within OncoLogic Clinic, handling the creation, updating, and analysis of patient data. It serves as the primary interface between healthcare providers, administrative staff, and patient records in the Spring Boot application.\n\n### Scope\n\nThe collection is organized into several interdependent submodules:\n\n- **Appointment Results**: Stores and retrieves the outcomes of patient appointments, including diagnoses, notes, and follow-up actions.\n    \n- **Medical History**: Manages the patient’s long-term health data, including previous illnesses, surgeries, and chronic conditions.\n    \n- **Observation**: Captures ongoing clinical observations made by healthcare providers during patient visits.\n    \n- **Patient**: Manages patient registration, demographic details, and unique identifiers.\n    \n- **Prescribed Medicine**: Handles medication prescriptions linked to patient treatments, including dosage and frequency.\n    \n- **Treatment**: Manages patient treatments, including ongoing, past, and future therapies.\n    \n- **Type of Treatment**: Defines various treatment categories (e.g., chemotherapy, surgery) and associated protocols.\n    \n\n### Key Features\n\n- **Multi-role Access**: Provides different access for admins (registration), healthcare providers (treatment and observation), and pharmacists (prescribed medicine).\n    \n- **Temporal Constraints**: Supports the tracking of time-sensitive patient data such as treatment timelines and medication schedules.\n    \n\n### Common Headers\n\n- **Authorization**: Bearer {{accessToken}} (role-specific permissions required)."
		},
		{
			"name": "Appointment",
			"item": [
				{
					"name": "Type Of Medical Appointment",
					"item": [
						{
							"name": "CREATE Type Of Medical Appointment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"const json = pm.response.json();",
											"pm.environment.set(\"medical_appointment_type_id\", json.id);",
											"pm.test(\"Created object has expected structure\", () => {",
											"    pm.expect(json).to.have.property(\"id\").that.is.a(\"number\");",
											"    pm.expect(json).to.have.property(\"name\").that.is.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Consulta General\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/medical-appointment-types",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-appointment-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Type Of Medical Appointment by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has expected fields\", () => {",
											"    const json = pm.response.json();",
											"    pm.expect(json).to.have.property(\"id\").that.is.a(\"number\");",
											"    pm.expect(json).to.have.property(\"name\").that.is.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/medical-appointment-types/{{medical_appointment_type_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-appointment-types",
										"{{medical_appointment_type_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Types Of Medical Appointment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an array of type objects\", () => {",
											"    const json = pm.response.json();",
											"    pm.expect(json).to.be.an(\"array\");",
											"    if (json.length > 0) {",
											"        pm.expect(json[0]).to.have.property(\"id\").that.is.a(\"number\");",
											"        pm.expect(json[0]).to.have.property(\"name\").that.is.a(\"string\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/medical-appointment-types",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-appointment-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Type Of Medical Appointment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Updated object has expected structure\", () => {",
											"    const json = pm.response.json();",
											"    pm.expect(json).to.have.property(\"id\").that.is.a(\"number\");",
											"    pm.expect(json).to.have.property(\"name\").that.is.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Consulta Especializada\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/medical-appointment-types/{{medical_appointment_type_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-appointment-types",
										"{{medical_appointment_type_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Type Of Medical Appointment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204 (No Content)\", () => {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Response body is empty\", () => {",
											"    pm.expect(pm.response.text()).to.eql(\"\");",
											"});",
											"",
											"",
											"pm.sendRequest({",
											"  url: pm.environment.get('base_url') + '/medical-appointment-types/' + pm.environment.get('medical_appointment_type_id'),",
											"  method: 'GET',  ",
											"  header: {",
											"    'Authorization': 'Bearer ' + pm.environment.get('jwt_token')",
											"  }",
											"}, (err, res) => {",
											"  pm.test(\"Verify deletion\", () => {",
											"    pm.expect(res.code).to.eql(404);",
											"  });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/medical-appointment-types/{{medical_appointment_type_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-appointment-types",
										"{{medical_appointment_type_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "This collection manages the classification system for medical appointments in the OncoLogic Clinic platform. It handles the creation and maintenance of appointment categories (e.g., \"Annual Checkup\", \"Emergency Consultation\", \"Post-Op Follow-up\"), which are fundamental for proper scheduling and reporting.\n\n---\n\n#### **Endpoints**\n\n1. **Create Appointment Type**\n    \n    - **Method**: `POST`\n        \n    - **URL**: `{{base_url}}/medical-appointment-types`\n        \n    - **Sample Data**: `123456789` (Test reference ID)\n        \n    - **Success Response**: `201 Created`\n        \n    - **Validation**:\n        \n        - Verifies response contains numeric `id`\n            \n        - Confirms presence of string `name` field\n            \n    - **Post-execution**: Stores type ID in `medical_appointment_type_id` variable\n        \n2. **List All Appointment Types**\n    \n    - **Method**: `GET`\n        \n    - **URL**: `{{base_url}}/medical-appointment-types`\n        \n    - **Success Response**: `200 OK`\n        \n    - **Validation**:\n        \n        - Confirms response is an array\n            \n        - Verifies each object contains `id` (number) and `name` (string)\n            \n3. **Get Specific Appointment Type**\n    \n    - **Method**: `GET`\n        \n    - **URL**: `{{base_url}}/medical-appointment-types/{{medical_appointment_type_id}}`\n        \n    - **Success Response**: `200 OK`\n        \n    - **Validation**:\n        \n        - Ensures consistent structure with creation endpoint\n            \n4. **Update Appointment Type**\n    \n    - **Method**: `PUT`\n        \n    - **URL**: `{{base_url}}/medical-appointment-types/{{medical_appointment_type_id}}`\n        \n    - **Success Response**: `200 OK`\n        \n    - **Validation**:\n        \n        - Maintains same structure checks as creation\n            \n        - (Implied) Name updates should persist\n            \n5. **Delete Appointment Type**\n    \n    - **Method**: `DELETE`\n        \n    - **URL**: `{{base_url}}/medical-appointment-types/{{medical_appointment_type_id}}`\n        \n    - **Success Response**: `204 No Content`\n        \n    - **Post-execution Verification**:\n        \n        - Follow-up `GET` request expects `404 Not Found`\n            \n\n---\n\n#### **Key Characteristics**\n\n- **Simple Structure**: Only `id` and `name` fields for easy maintenance\n    \n- **Reference Integrity**: Types cannot be deleted while associated with active appointments\n    \n- **Consistent Validation**: All endpoints validate field types strictly\n    \n\n#### **Dependencies**\n\n- Requires `medical_appointment_type_id` variable after creation\n    \n- All endpoints need valid `jwt_token`\n    \n\n#### **Error Handling**\n\n| Code | Scenario |\n| --- | --- |\n| `400` | Missing/empty `name` field |\n| `404` | Invalid `medical_appointment_type_id` in GET/PUT/DELETE |"
				},
				{
					"name": "Medical Offices",
					"item": [
						{
							"name": "CREATE Medical Office",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 201 Created\", () => pm.response.to.have.status(201));",
											"const response = pm.response.json();",
											"pm.environment.set(\"medical_office_id\", response.id);",
											"pm.test(\"Response contains created office\", () => {",
											"    pm.expect(response).to.have.property('id');",
											"    pm.expect(response.name).to.include('Consultorio');",
											"    pm.expect(response.medicalAppointmentId + '').to.eql(pm.environment.get('medical_appointment_id'));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Consultorio {{$randomInt}}\",\n  \"medicalAppointmentId\": {{medical_appointment_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/medical-offices",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-offices"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Medical Offices",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200 OK\", () => pm.response.to.have.status(200));",
											"pm.test(\"Response is array\", () => {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/medical-offices",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-offices"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Medical Office by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200 OK\", () => pm.response.to.have.status(200));",
											"pm.test(\"Verify office ID matches\", () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.id).to.eql(pm.environment.get('medical_office_id'));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/medical-offices/{{medical_office_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-offices",
										"{{medical_office_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Medical Office",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200 OK\", () => pm.response.to.have.status(200));",
											"pm.test(\"Verify updated name\", () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.name).to.include('Actualizado');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Consultorio Actualizado {{$randomInt}}\",\n  \"medicalAppointmentId\": {{medical_appointment_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/medical-offices/{{medical_office_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-offices",
										"{{medical_office_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Medical Office",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 204 No Content\", () => pm.response.to.have.status(204));",
											"",
											"pm.sendRequest({",
											"  url: pm.environment.get('base_url') + '/medical-offices/' + pm.environment.get('medical_office_id'),",
											"  method: 'GET',  ",
											"  header: {",
											"    'Authorization': 'Bearer ' + pm.environment.get('jwt_token')",
											"  }",
											"}, (err, res) => {",
											"  pm.test(\"Verify deletion\", () => {",
											"    pm.expect(res.code).to.eql(404);",
											"  });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/medical-offices/{{medical_office_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-offices",
										"{{medical_office_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "This collection manages physical or virtual consultation spaces within the OncoLogic Clinic system, handling their creation, retrieval, modification, and deletion. It ensures proper office setup for scheduling medical appointments.\n\n---\n\n#### **Endpoints**\n\n1. **Create Medical Office**\n    \n    - **Method**: `POST`\n        \n    - **URL**: `{{base_url}}/medical-offices`\n        \n    - **Sample Data**: `34567821` (ID or reference in test environment)\n        \n    - **Success Response**: `201 Created`\n        \n    - **Validation**:\n        \n        - Verifies response contains an auto-generated `id`.\n            \n        - Confirms office name includes `'Consultorio'` (Spanish for \"Office\") as a naming convention.\n            \n        - Validates linkage to an existing appointment (`medicalAppointmentId` matches environment variable).\n            \n    - **Post-execution**: Stores the office ID in `medical_office_id` variable for subsequent requests.\n        \n2. **List All Medical Offices**\n    \n    - **Method**: `GET`\n        \n    - **URL**: `{{base_url}}/medical-offices`\n        \n    - **Success Response**: `200 OK`\n        \n    - **Validation**:\n        \n        - Confirms response is an array (even if empty).\n            \n    - **Usage**: Typically called to populate UI dropdowns or check availability.\n        \n3. **Get Specific Office**\n    \n    - **Method**: `GET`\n        \n    - **URL**: `{{base_url}}/medical-offices/{{medical_office_id}}`\n        \n    - **Success Response**: `200 OK`\n        \n    - **Validation**:\n        \n        - Ensures returned `id` matches the requested office (via environment variable).\n            \n4. **Update Office**\n    \n    - **Method**: `PUT`\n        \n    - **URL**: `{{base_url}}/medical-offices/{{medical_office_id}}`\n        \n    - **Success Response**: `200 OK`\n        \n    - **Validation**:\n        \n        - Checks for `'Actualizado'` (Spanish for \"Updated\") in the name field to confirm persistence.\n            \n5. **Delete Office**\n    \n    - **Method**: `DELETE`\n        \n    - **URL**: `{{base_url}}/medical-offices/{{medical_office_id}}`\n        \n    - **Success Response**: `204 No Content`\n        \n    - **Post-execution**:\n        \n        - Automatically verifies deletion by attempting a follow-up `GET` request (expects `404 Not Found`).\n            \n\n---\n\n#### **Dependencies**\n\n- Requires `medical_appointment_id` (for linked appointments) and `jwt_token` (for auth) set in environment variables.\n    \n\n#### **Error Handling**\n\n- `400 Bad Request`: Missing/invalid fields (e.g., empty name).\n    \n- `404 Not Found`: Invalid `medical_office_id` referenced.\n    \n- `409 Conflict`: Office linked to active appointments (prevent orphaned records)."
				},
				{
					"name": "Medical Tasks",
					"item": [
						{
							"name": "CREATE Medical Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 201 Created\", () => pm.response.to.have.status(201));",
											"const response = pm.response.json();",
											"pm.environment.set(\"medical_task_id\", response.id);",
											"pm.test(\"Response contains created task\", () => {",
											"    pm.expect(response).to.have.property('id');",
											"    pm.expect(response.description).to.include('Medical Task');",
											"    pm.expect(response.status).to.eql('PENDING');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"Medical Task {{$randomInt}}\",\n  \"estimatedTime\": 60,\n  \"status\": \"PENDING\",\n  \"responsible\": \"Dr. {{$randomLastName}}\",\n  \"medicalAppointmentIds\": [{{medical_appointment_id}}]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/medical-tasks",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Medical Tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200 OK\", () => pm.response.to.have.status(200));",
											"pm.test(\"Response is array\", () => {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/medical-tasks",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Medical Task by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200 OK\", () => pm.response.to.have.status(200));",
											"pm.test(\"Verify task ID matches\", () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.id).to.eql(pm.environment.get('medical_task_id'));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/medical-tasks/{{medical_task_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-tasks",
										"{{medical_task_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Medical Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200 OK\", () => pm.response.to.have.status(200));",
											"pm.test(\"Verify updated fields\", () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.description).to.include('Updated');",
											"    pm.expect(response.status).to.eql('COMPLETED');",
											"    pm.expect(response.estimatedTime).to.eql(90);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"Updated Medical Task {{$randomInt}}\",\n  \"estimatedTime\": 90,\n  \"status\": \"COMPLETED\",\n  \"responsible\": \"Dr. {{$randomLastName}}\",\n  \"medicalAppointmentIds\": [{{medical_appointment_id}}]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/medical-tasks/{{medical_task_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-tasks",
										"{{medical_task_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Medical Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 204 No Content\", () => pm.response.to.have.status(204));",
											"pm.sendRequest({",
											"  url: pm.environment.get('base_url') + '/medical-tasks/' + pm.environment.get('medical_task_id'),",
											"  method: 'GET',  ",
											"  header: {",
											"    'Authorization': 'Bearer ' + pm.environment.get('jwt_token')",
											"  }",
											"}, (err, res) => {",
											"  pm.test(\"Verify deletion\", () => {",
											"    pm.expect(res.code).to.eql(404);",
											"  });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/medical-tasks/{{medical_task_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-tasks",
										"{{medical_task_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "This collection manages clinical procedures and actions associated with appointments in the OncoLogic Clinic system. It handles the lifecycle of medical tasks from creation to completion, including status tracking and time estimation.\n\n---\n\n#### **Endpoints**\n\n1. **Create Medical Task**\n    \n    - **Method**: `POST`\n        \n    - **URL**: `{{base_url}}/medical-tasks`\n        \n    - **Sample Data**: `12345678` (Test reference ID)\n        \n    - **Success Response**: `201 Created`\n        \n    - **Validation**:\n        \n        - Verifies response contains generated `id`\n            \n        - Confirms description includes default text `'Medical Task'`\n            \n        - Ensures initial status is `PENDING`\n            \n    - **Post-execution**: Stores task ID in `medical_task_id` variable\n        \n2. **List All Medical Tasks**\n    \n    - **Method**: `GET`\n        \n    - **URL**: `{{base_url}}/medical-tasks`\n        \n    - **Success Response**: `200 OK`\n        \n    - **Validation**:\n        \n        - Confirms response is an array\n            \n    - **Usage**: Typically used for dashboards or task assignment interfaces\n        \n3. **Get Specific Task**\n    \n    - **Method**: `GET`\n        \n    - **URL**: `{{base_url}}/medical-tasks/{{medical_task_id}}`\n        \n    - **Success Response**: `200 OK`\n        \n    - **Validation**:\n        \n        - Verifies returned `id` matches requested task\n            \n4. **Update Task**\n    \n    - **Method**: `PUT`\n        \n    - **URL**: `{{base_url}}/medical-tasks/{{medical_task_id}}`\n        \n    - **Success Response**: `200 OK`\n        \n    - **Validation**:\n        \n        - Checks for `'Updated'` in description\n            \n        - Confirms status transition to `COMPLETED`\n            \n        - Validates numeric `estimatedTime` value (e.g., 90 minutes)\n            \n5. **Delete Task**\n    \n    - **Method**: `DELETE`\n        \n    - **URL**: `{{base_url}}/medical-tasks/{{medical_task_id}}`\n        \n    - **Success Response**: `204 No Content`\n        \n    - **Post-execution**:\n        \n        - Automatically verifies deletion with follow-up `GET` request\n            \n\n---\n\n#### **Key Features**\n\n- **Status Tracking**: Enforces workflow from `PENDING` → `COMPLETED`\n    \n- **Time Management**: Includes `estimatedTime` field for procedure duration tracking\n    \n- **Atomic Operations**: Each task operates independently of appointments\n    \n\n#### **Dependencies**\n\n- Requires valid `jwt_token` for all endpoints\n    \n- Uses `medical_task_id` environment variable after creation\n    \n\n#### **Error Handling**\n\n- `400 Bad Request`: Missing required fields (description, status)\n    \n- `404 Not Found`: Invalid `medical_task_id`\n    \n- `422 Unprocessable Entity`: Invalid status transition"
				},
				{
					"name": "Medical Appointments",
					"item": [
						{
							"name": "CREATE Medical Appointment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201 Created\", function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has correct structure\", function() {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.have.property('id');",
											"    pm.expect(response).to.have.property('doctorId', 1);",
											"    pm.expect(response).to.have.property('typeOfMedicalAppointmentId', 1);",
											"    pm.expect(response).to.have.property('medicalHistoryId', 1);",
											"    pm.expect(response).to.have.property('medicalOfficeIds').that.is.an('array');",
											"    pm.expect(response).to.have.property('medicalTaskIds').that.is.an('array');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"doctorId\": 1,\n    \"typeOfMedicalAppointmentId\": 1,\n    \"appointmentDate\": \"{{future_date}}\",\n    \"treatmentId\": 1,\n    \"medicalHistoryId\": 1,\n    \"medicalOfficeIds\": [\n        1\n    ],\n    \"medicalTaskIds\": [\n        1,\n        2\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/medical-appointments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-appointments"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Medical Appointment by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200 OK\", () => pm.response.to.have.status(200));",
											"pm.test(\"Matches created appointment ID\", () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.id + '').to.eql(pm.environment.get('medical_appointment_id'));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/medical-appointments/{{medical_appointment_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-appointments",
										"{{medical_appointment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Medical Appointments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200 OK\", () => pm.response.to.have.status(200));",
											"pm.test(\"Response is non-empty array\", () => {",
											"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/medical-appointments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-appointments"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Medical Appointment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200 OK\", () => pm.response.to.have.status(200));",
											"pm.test(\"Verify updated fields\", () => {",
											"    const response = pm.response.json();",
											"    pm.expect(response.doctorId).to.eql(2);",
											"    pm.expect(response.medicalOfficeIds).to.include(1);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"doctorId\": 2,\n    \"typeOfMedicalAppointmentId\": 2,\n    \"appointmentDate\": \"{{futureDateTime}}\",\n    \"treatmentId\": 2,\n    \"medicalHistoryId\": 2,\n    \"medicalOfficeIds\": [\n        1\n    ],\n    \"medicalTaskIds\": [\n        2\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/medical-appointments/{{medical_appointment_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-appointments",
										"{{medical_appointment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Medical Appointment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 204 No Content\", () => pm.response.to.have.status(204));",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/medical-appointments/{{medical_appointment_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"medical-appointments",
										"{{medical_appointment_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "This collection manages the scheduling and administration of medical appointments within OncoLogic Clinic. It supports the creation, retrieval, updating, and listing of appointments, ensuring effective coordination between doctors, patients, and medical offices.\n\n---\n\n### Endpoints\n\n**Create Medical Appointment**\n\n- **Method**: POST\n    \n- **URL**: `{{base_url}}/medical-appointments`\n    \n- **Sample Data**: 12345678 (example patient ID)\n    \n- **Success Response**: 201 Created\n    \n- **Validation**:\n    \n    - Status code is 201.\n        \n    - Response includes `id`, `doctorId`, `appointmentDate`, and `medicalOfficeIds`.\n        \n- **Post-execution**: Stores the appointment ID in `medical_appointment_id` for chained requests.\n    \n\n```\njsCopyEditpm.test(\"Status 201 Created\", () => pm.response.to.have.status(201));\nconst response = pm.response.json();\npm.environment.set(\"medical_appointment_id\", response.id);\npm.test(\"Response has all required fields\", () => {\n    pm.expect(response).to.have.property('id');\n    pm.expect(response.doctorId).to.eql(1);\n    pm.expect(response.appointmentDate).to.be.a('string');\n    pm.expect(response.medicalOfficeIds).to.be.an('array');\n});\n\n ```\n\n---\n\n**Get Specific Medical Appointment**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/medical-appointments/{{medical_appointment_id}}`\n    \n- **Sample Data**: 12345 (example appointment ID)\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Confirms returned `id` matches `medical_appointment_id`.\n        \n\n```\njsCopyEditpm.test(\"Status 200 OK\", () => pm.response.to.have.status(200));\npm.test(\"Matches created appointment ID\", () => {\n    const response = pm.response.json();\n    pm.expect(response.id).to.eql(pm.environment.get('medical_appointment_id'));\n});\n\n ```\n\n---\n\n**List All Medical Appointments**\n\n- **Method**: GET\n    \n- **URL**: `{{base_url}}/medical-appointments`\n    \n- **Sample Data**: 1234 (example query)\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Response is a non-empty array of appointments.\n        \n\n```\njsCopyEditpm.test(\"Status 200 OK\", () => pm.response.to.have.status(200));\npm.test(\"Response is non-empty array\", () => {\n    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\n});\n\n ```\n\n---\n\n**Update Medical Appointment**\n\n- **Method**: PUT\n    \n- **URL**: `{{base_url}}/medical-appointments/{{medical_appointment_id}}`\n    \n- **Sample Data**: 123456 (example updated data)\n    \n- **Success Response**: 200 OK\n    \n- **Validation**:\n    \n    - Confirms `doctorId` and `medicalOfficeIds` were correctly updated.\n        \n\n```\njsCopyEditpm.test(\"Status 200 OK\", () => pm.response.to.have.status(200));\npm.test(\"Verify updated fields\", () => {\n    const response = pm.response.json();\n    pm.expect(response.doctorId).to.eql(2);\n    pm.expect(response.medicalOfficeIds).to.include(3);\n});\n\n ```\n\n---\n\n### Dependencies\n\n- Requires environment variable:\n    \n    - `medical_appointment_id`: used across GET and PUT requests.\n        \n- Authorization: Valid JWT token must be included in request headers.\n    \n\n---"
				}
			],
			"description": "This collection manages the end-to-end appointment workflow for the OncoLogic Clinic system, encompassing the creation, organization, and tracking of medical appointments, offices, tasks, and appointment types. It serves as the central hub for all appointment-related operations in the Spring Boot application.\n\n#### **Scope**\n\nThe collection is organized into four logical submodules:\n\n1. **Medical Offices**: Physical or virtual locations where consultations occur.\n    \n2. **Medical Tasks**: Actions or procedures associated with appointments.\n    \n3. **Medical Appointments**: Scheduled patient-doctor interactions.\n    \n4. **Type of Medical Appointment**: Classification of appointments by purpose (e.g., check-up, follow-up).\n    \n\n#### **Key Features**\n\n- **Consistent Structure**: All endpoints follow RESTful conventions with standardized request/response formats.\n    \n- **Dependencies**: Most submodules require authentication (JWT token from the `Authentication` collection) for access control.\n    \n- **Data Integrity**: Includes validation checks for appointment conflicts, office availability, and task dependencies.\n    \n\n#### **Common Headers**\n\n- `Authorization: Bearer {{accessToken}}` (mandatory for protected endpoints).\n    \n- `Content-Type: application/json`.\n    \n\n#### **Usage Flow**\n\n1. **Prerequisite**: Obtain a valid token via the `Authentication` collection.\n    \n2. **Hierarchical Operations**:\n    \n    - Configure **Medical Offices** and **Type of Medical Appointment** first (reference data).\n        \n    - Schedule **Medical Appointments**, optionally linking to **Medical Tasks**.\n        \n\n#### **Examples of Use Cases**\n\n- A patient schedules a follow-up (Type of Medical Appointment) at a specific branch (Medical Offices).\n    \n- A doctor reviews pending tasks (Medical Tasks) for their daily appointments (Medical Appointments)."
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Verificar y renovar token si es necesario",
					"if (!pm.environment.get('jwt_token')) {",
					"   pm.sendRequest({",
					"     url: pm.environment.get('base_url') + '/auth/login',",
					"     method: 'POST',",
					"     header: 'Content-Type:application/json',",
					"     body: {",
					"       mode: 'raw',",
					"       raw: JSON.stringify({",
					"         username: pm.environment.get('admin_username'),",
					"         password: pm.environment.get('admin_password')",
					"       })",
					"     }",
					"   }, (err, res) => {",
					"     if (!err) {",
					"       pm.environment.set('jwt_token', res.json().token);",
					"     }",
					"   });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "last_prescribed_medicine_id",
			"value": ""
		},
		{
			"key": "last_treatment_id",
			"value": ""
		},
		{
			"key": "last_type_of_treatment_id",
			"value": ""
		},
		{
			"key": "last_observation_id",
			"value": ""
		},
		{
			"key": "last_patient_id",
			"value": ""
		},
		{
			"key": "created_doctor_id",
			"value": ""
		},
		{
			"key": "medical_license",
			"value": ""
		},
		{
			"key": "updated_medical_license",
			"value": ""
		},
		{
			"key": "created_permission_id",
			"value": ""
		},
		{
			"key": "created_permission_name",
			"value": ""
		},
		{
			"key": "updated_permission_name",
			"value": ""
		},
		{
			"key": "created_role_id",
			"value": ""
		},
		{
			"key": "created_role_name",
			"value": ""
		},
		{
			"key": "initial_permissions_count",
			"value": ""
		},
		{
			"key": "updated_role_name",
			"value": ""
		},
		{
			"key": "updated_permissions_count",
			"value": ""
		},
		{
			"key": "created_user_id",
			"value": ""
		},
		{
			"key": "created_user_username",
			"value": ""
		},
		{
			"key": "initial_roles_count",
			"value": ""
		},
		{
			"key": "updated_user_username",
			"value": ""
		},
		{
			"key": "updated_roles_count",
			"value": ""
		}
	]
}